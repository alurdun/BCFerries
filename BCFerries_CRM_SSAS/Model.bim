{
  "name": "SemanticModel",
  "compatibilityLevel": 1200,
  "model": {
    "culture": "en-CA",
    "dataSources": [
      {
        "name": "CRM",
        "connectionString": "Provider=OraOLEDB.Oracle;Data Source=scan.dev01.rac.bcferries.corpt;User ID=joanders;Persist Security Info=false",
        "impersonationMode": "impersonateServiceAccount",
        "annotations": [
          {
            "name": "ConnectionEditUISource",
            "value": "Oracle"
          }
        ]
      },
      {
        "name": "Booking",
        "connectionString": "Provider=OraOLEDB.Oracle;Data Source=scan.dev01.rac.bcferries.corptBooking;User ID=report_proxy_user;Persist Security Info=true",
        "impersonationMode": "impersonateServiceAccount",
        "annotations": [
          {
            "name": "ConnectionEditUISource",
            "value": "Oracle"
          }
        ]
      },
      {
        "name": "Text PortLatLong",
        "connectionString": "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=\\\\vdcwpbixdev01\\Data Files;Persist Security Info=false;Extended Properties=\"Text;HDR=Yes;FMT=CSVDelimited\";Jet OLEDB:Registry Path=Software\\Wow6432Node\\Microsoft\\Microsoft SQL Server\\Microsoft Analysis Services\\Settings\\",
        "impersonationMode": "impersonateServiceAccount",
        "annotations": [
          {
            "name": "ConnectionEditUISource",
            "value": "Text$*$FilePath=\\\\vdcwpbixdev01\\Data Files\\PortLatLong.csv$*$"
          }
        ]
      }
    ],
    "tables": [
      {
        "name": "dimContact",
        "columns": [
          {
            "name": "MR_MS",
            "dataType": "string",
            "sourceColumn": "MR_MS",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "LASTNAME",
            "dataType": "string",
            "sourceColumn": "LASTNAME",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "FIRSTNAME",
            "dataType": "string",
            "sourceColumn": "FIRSTNAME",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "MIDDLENAME",
            "dataType": "string",
            "sourceColumn": "MIDDLENAME",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "PRIMARYPHONE",
            "dataType": "string",
            "sourceColumn": "PRIMARYPHONE",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "PRIMARYEMAIL",
            "dataType": "string",
            "sourceColumn": "PRIMARYEMAIL",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "STATUS",
            "dataType": "string",
            "sourceColumn": "STATUS",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "STATUSDATE",
            "dataType": "dateTime",
            "sourceColumn": "STATUSDATE",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "STATUSEXPIRYDATE",
            "dataType": "dateTime",
            "sourceColumn": "STATUSEXPIRYDATE",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "REASON",
            "dataType": "string",
            "sourceColumn": "REASON",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "CUSTOMERSINCE",
            "dataType": "dateTime",
            "sourceColumn": "CUSTOMERSINCE",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "CONSUMERFLAG",
            "dataType": "string",
            "sourceColumn": "CONSUMERFLAG",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "UNVERIFIEDFLAG",
            "dataType": "string",
            "sourceColumn": "UNVERIFIEDFLAG",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "COMMENTS",
            "dataType": "string",
            "sourceColumn": "COMMENTS",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "PREFERREDCOMMUNICATIONS",
            "dataType": "string",
            "sourceColumn": "PREFERREDCOMMUNICATIONS",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "CREATED",
            "dataType": "dateTime",
            "sourceColumn": "CREATED",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "CREATEDBY",
            "dataType": "string",
            "sourceColumn": "CREATEDBY",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "LASTUPDATEDTHISDATABASE",
            "dataType": "dateTime",
            "sourceColumn": "LASTUPDATEDTHISDATABASE",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "LASTUPDATED",
            "dataType": "dateTime",
            "sourceColumn": "LASTUPDATED",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "LASTUPDATEDBY",
            "dataType": "string",
            "sourceColumn": "LASTUPDATEDBY",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "CONTACTID",
            "dataType": "string",
            "isUnique": true,
            "isKey": true,
            "sourceColumn": "CONTACTID"
          },
          {
            "name": "CUSTOMERNUMBER",
            "dataType": "string",
            "sourceColumn": "CUSTOMERNUMBER"
          },
          {
            "name": "PRIMARYADDRESS",
            "dataType": "string",
            "sourceColumn": "PRIMARYADDRESS"
          },
          {
            "name": "PRIMARYADDRESSLINE2",
            "dataType": "string",
            "sourceColumn": "PRIMARYADDRESSLINE2"
          },
          {
            "name": "PRIMARYADDRESSCITY",
            "dataType": "string",
            "sourceColumn": "PRIMARYADDRESSCITY",
            "dataCategory": "City"
          },
          {
            "name": "PRIMARYADDRESSPROVINCESTATE",
            "dataType": "string",
            "sourceColumn": "PRIMARYADDRESSPROVINCESTATE",
            "dataCategory": "StateOrProvince"
          },
          {
            "name": "PRIMARYADDRESSCOUNTRY",
            "dataType": "string",
            "sourceColumn": "PRIMARYADDRESSCOUNTRY",
            "dataCategory": "Country"
          },
          {
            "name": "PRIMARYPOSTALZIP",
            "dataType": "string",
            "sourceColumn": "PRIMARYPOSTALZIP",
            "dataCategory": "PostalCode"
          }
        ],
        "partitions": [
          {
            "name": "dimContact",
            "dataView": "full",
            "source": {
              "query": [
                "select * from (",
                "select ",
                "    CONTACT.ROW_ID as ContactID",
                "    , COALESCE(TRIM(TO_CHAR(CONTACTX.ATTRIB_14)), CONTACT.ROW_ID) as CustomerNumber",
                "    , CONTACT.PER_TITLE as Mr_Ms",
                "    , CONTACT.LAST_NAME as LastName",
                "    , CONTACT.FST_NAME as FirstName",
                "    , CONTACT.MID_NAME as MiddleName",
                "    , PHONE.ADDR as PrimaryPhone",
                "    , EMAIL.ADDR as PrimaryEmail",
                "    , PERSONALADDRESS.ADDR as PrimaryAddress",
                "    , PERSONALADDRESS.ADDR_LINE_2 as PrimaryAddressLine2",
                "    , PERSONALADDRESS.CITY as PrimaryAddressCity",
                "    , PERSONALADDRESS.STATE as PrimaryAddressProvinceState",
                "    , PERSONALADDRESS.COUNTRY as PrimaryAddressCountry",
                "    , PERSONALADDRESS.ZIPCODE as PrimaryPostalZip",
                "    , CONTACT.CUST_STAT_CD as Status",
                "    , CONTACTX.ATTRIB_12 as StatusDate",
                "    , CONTACT.CUST_END_DT as StatusExpiryDate",
                "    , CONTACTX.ATTRIB_01 as Reason",
                "    , CONTACT.CUST_SINCE_DT as CustomerSince",
                "    , CONTACT.CONSUMER_FLG as ConsumerFlag",
                "    , CONTACT.X_TRAVEL_UNVERIFIED_FLG as UnverifiedFlag",
                "    , CONTACT.COMMENTS as Comments",
                "    , CONTACT.PREF_COMM_MEDIA_CD as PreferredCommunications",
                "    , CONTACT.CREATED as Created",
                "    , CONTACT.CREATED_BY as CreatedBy",
                "    , CONTACT.DB_LAST_UPD as LastUpdatedThisDatabase",
                "    , CONTACT.LAST_UPD as LastUpdated",
                "    , CONTACT.LAST_UPD_BY as LastUpdatedBy",
                "from BCFSBLTST.S_CONTACT CONTACT",
                "left outer join BCFSBLTST.S_PER_COMM_ADDR PHONE",
                "    on CONTACT.PR_ALT_PH_NUM_ID = PHONE.ROW_ID",
                "left outer join BCFSBLTST.S_PER_COMM_ADDR EMAIL ",
                "    on CONTACT.PR_EMAIL_ADDR_ID = EMAIL.ROW_ID",
                "left outer join BCFSBLTST.S_ADDR_PER PERSONALADDRESS",
                "    on CONTACT.PR_PER_ADDR_ID = PERSONALADDRESS.ROW_ID",
                "left outer join BCFSBLTST.S_CONTACT_X CONTACTX ",
                "    on CONTACT.ROW_ID = CONTACTX.ROW_ID",
                "union",
                "select 'NOREL' as ContactID",
                "    , '0' as CustomerNumber",
                "    , 'NR' as Mr_Ms",
                "    , 'NOREL' as LastName",
                "    , 'NOREL' as FirstName",
                "    , 'NOREL' as MiddleName",
                "    , '0' as PrimaryPhone",
                "    , 'NOREL' as PrimaryEmail",
                "    , 'NOREL' as PrimaryAddress",
                "    , 'NOREL' as PrimaryAddressLine2",
                "    , 'NOREL' as PrimaryAddressCity",
                "    , 'NOREL' as PrimaryAddressProvinceState",
                "    , 'NOREL' as PrimaryAddressCountry",
                "    , 'NOREL' as PrimaryPostalZip",
                "    , 'NOREL' as Status",
                "    , TO_DATE('2900-01-01', 'YYYY-MM-DD') as StatusDate",
                "    , TO_DATE('2900-01-01', 'YYYY-MM-DD') as StatusExpiryDate",
                "    , 'NOREL' as Reason",
                "    , TO_DATE('2900-01-01', 'YYYY-MM-DD') as CustomerSince",
                "    , '0' as ConsumerFlag",
                "    , '0' as UnverifiedFlag",
                "    , 'NOREL' as Comments",
                "    , 'NOREL' as PreferredCommunications",
                "    , TO_DATE('2900-01-01', 'YYYY-MM-DD') as Created",
                "    , 'NOREL' as CreatedBy",
                "    , TO_DATE('2900-01-01', 'YYYY-MM-DD') as LastUpdatedThisDatabase",
                "    , TO_DATE('2900-01-01', 'YYYY-MM-DD') as LastUpdated",
                "    , 'NOREL' as LastUpdatedBy from dual) dimCustomer where CustomerNumber not in (",
                "    '10000163',",
                "'10000585',",
                "'21',",
                "'10000581',",
                "'10001602',",
                "'10001322')"
              ],
              "dataSource": "CRM"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select * from (",
                  "select ",
                  "    CONTACT.ROW_ID as ContactID",
                  "    , COALESCE(TRIM(TO_CHAR(CONTACTX.ATTRIB_14)), CONTACT.ROW_ID) as CustomerNumber",
                  "    , CONTACT.PER_TITLE as Mr_Ms",
                  "    , CONTACT.LAST_NAME as LastName",
                  "    , CONTACT.FST_NAME as FirstName",
                  "    , CONTACT.MID_NAME as MiddleName",
                  "    , PHONE.ADDR as PrimaryPhone",
                  "    , EMAIL.ADDR as PrimaryEmail",
                  "    , PERSONALADDRESS.ADDR as PrimaryAddress",
                  "    , PERSONALADDRESS.ADDR_LINE_2 as PrimaryAddressLine2",
                  "    , PERSONALADDRESS.CITY as PrimaryAddressCity",
                  "    , PERSONALADDRESS.STATE as PrimaryAddressProvinceState",
                  "    , PERSONALADDRESS.COUNTRY as PrimaryAddressCountry",
                  "    , PERSONALADDRESS.ZIPCODE as PrimaryPostalZip",
                  "    , CONTACT.CUST_STAT_CD as Status",
                  "    , CONTACTX.ATTRIB_12 as StatusDate",
                  "    , CONTACT.CUST_END_DT as StatusExpiryDate",
                  "    , CONTACTX.ATTRIB_01 as Reason",
                  "    , CONTACT.CUST_SINCE_DT as CustomerSince",
                  "    , CONTACT.CONSUMER_FLG as ConsumerFlag",
                  "    , CONTACT.X_TRAVEL_UNVERIFIED_FLG as UnverifiedFlag",
                  "    , CONTACT.COMMENTS as Comments",
                  "    , CONTACT.PREF_COMM_MEDIA_CD as PreferredCommunications",
                  "    , CONTACT.CREATED as Created",
                  "    , CONTACT.CREATED_BY as CreatedBy",
                  "    , CONTACT.DB_LAST_UPD as LastUpdatedThisDatabase",
                  "    , CONTACT.LAST_UPD as LastUpdated",
                  "    , CONTACT.LAST_UPD_BY as LastUpdatedBy",
                  "from BCFSBLTST.S_CONTACT CONTACT",
                  "left outer join BCFSBLTST.S_PER_COMM_ADDR PHONE",
                  "    on CONTACT.PR_ALT_PH_NUM_ID = PHONE.ROW_ID",
                  "left outer join BCFSBLTST.S_PER_COMM_ADDR EMAIL ",
                  "    on CONTACT.PR_EMAIL_ADDR_ID = EMAIL.ROW_ID",
                  "left outer join BCFSBLTST.S_ADDR_PER PERSONALADDRESS",
                  "    on CONTACT.PR_PER_ADDR_ID = PERSONALADDRESS.ROW_ID",
                  "left outer join BCFSBLTST.S_CONTACT_X CONTACTX ",
                  "    on CONTACT.ROW_ID = CONTACTX.ROW_ID",
                  "union",
                  "select 'NOREL' as ContactID",
                  "    , '0' as CustomerNumber",
                  "    , 'NR' as Mr_Ms",
                  "    , 'NOREL' as LastName",
                  "    , 'NOREL' as FirstName",
                  "    , 'NOREL' as MiddleName",
                  "    , '0' as PrimaryPhone",
                  "    , 'NOREL' as PrimaryEmail",
                  "    , 'NOREL' as PrimaryAddress",
                  "    , 'NOREL' as PrimaryAddressLine2",
                  "    , 'NOREL' as PrimaryAddressCity",
                  "    , 'NOREL' as PrimaryAddressProvinceState",
                  "    , 'NOREL' as PrimaryAddressCountry",
                  "    , 'NOREL' as PrimaryPostalZip",
                  "    , 'NOREL' as Status",
                  "    , TO_DATE('2900-01-01', 'YYYY-MM-DD') as StatusDate",
                  "    , TO_DATE('2900-01-01', 'YYYY-MM-DD') as StatusExpiryDate",
                  "    , 'NOREL' as Reason",
                  "    , TO_DATE('2900-01-01', 'YYYY-MM-DD') as CustomerSince",
                  "    , '0' as ConsumerFlag",
                  "    , '0' as UnverifiedFlag",
                  "    , 'NOREL' as Comments",
                  "    , 'NOREL' as PreferredCommunications",
                  "    , TO_DATE('2900-01-01', 'YYYY-MM-DD') as Created",
                  "    , 'NOREL' as CreatedBy",
                  "    , TO_DATE('2900-01-01', 'YYYY-MM-DD') as LastUpdatedThisDatabase",
                  "    , TO_DATE('2900-01-01', 'YYYY-MM-DD') as LastUpdated",
                  "    , 'NOREL' as LastUpdatedBy from dual) dimCustomer where CustomerNumber not in (",
                  "    '10000163',",
                  "'10000585',",
                  "'21',",
                  "'10000581',",
                  "'10001602',",
                  "'10001322')</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select * from (",
              "select ",
              "    CONTACT.ROW_ID as ContactID",
              "    , COALESCE(TRIM(TO_CHAR(CONTACTX.ATTRIB_14)), CONTACT.ROW_ID) as CustomerNumber",
              "    , CONTACT.PER_TITLE as Mr_Ms",
              "    , CONTACT.LAST_NAME as LastName",
              "    , CONTACT.FST_NAME as FirstName",
              "    , CONTACT.MID_NAME as MiddleName",
              "    , PHONE.ADDR as PrimaryPhone",
              "    , EMAIL.ADDR as PrimaryEmail",
              "    , PERSONALADDRESS.ADDR as PrimaryAddress",
              "    , PERSONALADDRESS.ADDR_LINE_2 as PrimaryAddressLine2",
              "    , PERSONALADDRESS.CITY as PrimaryAddressCity",
              "    , PERSONALADDRESS.STATE as PrimaryAddressProvinceState",
              "    , PERSONALADDRESS.COUNTRY as PrimaryAddressCountry",
              "    , PERSONALADDRESS.ZIPCODE as PrimaryPostalZip",
              "    , CONTACT.CUST_STAT_CD as Status",
              "    , CONTACTX.ATTRIB_12 as StatusDate",
              "    , CONTACT.CUST_END_DT as StatusExpiryDate",
              "    , CONTACTX.ATTRIB_01 as Reason",
              "    , CONTACT.CUST_SINCE_DT as CustomerSince",
              "    , CONTACT.CONSUMER_FLG as ConsumerFlag",
              "    , CONTACT.X_TRAVEL_UNVERIFIED_FLG as UnverifiedFlag",
              "    , CONTACT.COMMENTS as Comments",
              "    , CONTACT.PREF_COMM_MEDIA_CD as PreferredCommunications",
              "    , CONTACT.CREATED as Created",
              "    , CONTACT.CREATED_BY as CreatedBy",
              "    , CONTACT.DB_LAST_UPD as LastUpdatedThisDatabase",
              "    , CONTACT.LAST_UPD as LastUpdated",
              "    , CONTACT.LAST_UPD_BY as LastUpdatedBy",
              "from BCFSBLTST.S_CONTACT CONTACT",
              "left outer join BCFSBLTST.S_PER_COMM_ADDR PHONE",
              "    on CONTACT.PR_ALT_PH_NUM_ID = PHONE.ROW_ID",
              "left outer join BCFSBLTST.S_PER_COMM_ADDR EMAIL ",
              "    on CONTACT.PR_EMAIL_ADDR_ID = EMAIL.ROW_ID",
              "left outer join BCFSBLTST.S_ADDR_PER PERSONALADDRESS",
              "    on CONTACT.PR_PER_ADDR_ID = PERSONALADDRESS.ROW_ID",
              "left outer join BCFSBLTST.S_CONTACT_X CONTACTX ",
              "    on CONTACT.ROW_ID = CONTACTX.ROW_ID",
              "union",
              "select 'NOREL' as ContactID",
              "    , '0' as CustomerNumber",
              "    , 'NR' as Mr_Ms",
              "    , 'NOREL' as LastName",
              "    , 'NOREL' as FirstName",
              "    , 'NOREL' as MiddleName",
              "    , '0' as PrimaryPhone",
              "    , 'NOREL' as PrimaryEmail",
              "    , 'NOREL' as PrimaryAddress",
              "    , 'NOREL' as PrimaryAddressLine2",
              "    , 'NOREL' as PrimaryAddressCity",
              "    , 'NOREL' as PrimaryAddressProvinceState",
              "    , 'NOREL' as PrimaryAddressCountry",
              "    , 'NOREL' as PrimaryPostalZip",
              "    , 'NOREL' as Status",
              "    , TO_DATE('2900-01-01', 'YYYY-MM-DD') as StatusDate",
              "    , TO_DATE('2900-01-01', 'YYYY-MM-DD') as StatusExpiryDate",
              "    , 'NOREL' as Reason",
              "    , TO_DATE('2900-01-01', 'YYYY-MM-DD') as CustomerSince",
              "    , '0' as ConsumerFlag",
              "    , '0' as UnverifiedFlag",
              "    , 'NOREL' as Comments",
              "    , 'NOREL' as PreferredCommunications",
              "    , TO_DATE('2900-01-01', 'YYYY-MM-DD') as Created",
              "    , 'NOREL' as CreatedBy",
              "    , TO_DATE('2900-01-01', 'YYYY-MM-DD') as LastUpdatedThisDatabase",
              "    , TO_DATE('2900-01-01', 'YYYY-MM-DD') as LastUpdated",
              "    , 'NOREL' as LastUpdatedBy from dual) dimCustomer where CustomerNumber not in (",
              "    '10000163',",
              "'10000585',",
              "'21',",
              "'10000581',",
              "'10001602',",
              "'10001322')"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "dimContact"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select * from (",
              "select ",
              "    CONTACT.ROW_ID as ContactID",
              "    , COALESCE(TRIM(TO_CHAR(CONTACTX.ATTRIB_14)), CONTACT.ROW_ID) as CustomerNumber",
              "    , CONTACT.PER_TITLE as Mr_Ms",
              "    , CONTACT.LAST_NAME as LastName",
              "    , CONTACT.FST_NAME as FirstName",
              "    , CONTACT.MID_NAME as MiddleName",
              "    , PHONE.ADDR as PrimaryPhone",
              "    , EMAIL.ADDR as PrimaryEmail",
              "    , PERSONALADDRESS.ADDR as PrimaryAddress",
              "    , PERSONALADDRESS.ADDR_LINE_2 as PrimaryAddressLine2",
              "    , PERSONALADDRESS.CITY as PrimaryAddressCity",
              "    , PERSONALADDRESS.STATE as PrimaryAddressProvinceState",
              "    , PERSONALADDRESS.COUNTRY as PrimaryAddressCountry",
              "    , PERSONALADDRESS.ZIPCODE as PrimaryPostalZip",
              "    , CONTACT.CUST_STAT_CD as Status",
              "    , CONTACTX.ATTRIB_12 as StatusDate",
              "    , CONTACT.CUST_END_DT as StatusExpiryDate",
              "    , CONTACTX.ATTRIB_01 as Reason",
              "    , CONTACT.CUST_SINCE_DT as CustomerSince",
              "    , CONTACT.CONSUMER_FLG as ConsumerFlag",
              "    , CONTACT.X_TRAVEL_UNVERIFIED_FLG as UnverifiedFlag",
              "    , CONTACT.COMMENTS as Comments",
              "    , CONTACT.PREF_COMM_MEDIA_CD as PreferredCommunications",
              "    , CONTACT.CREATED as Created",
              "    , CONTACT.CREATED_BY as CreatedBy",
              "    , CONTACT.DB_LAST_UPD as LastUpdatedThisDatabase",
              "    , CONTACT.LAST_UPD as LastUpdated",
              "    , CONTACT.LAST_UPD_BY as LastUpdatedBy",
              "from BCFSBLTST.S_CONTACT CONTACT",
              "left outer join BCFSBLTST.S_PER_COMM_ADDR PHONE",
              "    on CONTACT.PR_ALT_PH_NUM_ID = PHONE.ROW_ID",
              "left outer join BCFSBLTST.S_PER_COMM_ADDR EMAIL ",
              "    on CONTACT.PR_EMAIL_ADDR_ID = EMAIL.ROW_ID",
              "left outer join BCFSBLTST.S_ADDR_PER PERSONALADDRESS",
              "    on CONTACT.PR_PER_ADDR_ID = PERSONALADDRESS.ROW_ID",
              "left outer join BCFSBLTST.S_CONTACT_X CONTACTX ",
              "    on CONTACT.ROW_ID = CONTACTX.ROW_ID",
              "union",
              "select 'NOREL' as ContactID",
              "    , '0' as CustomerNumber",
              "    , 'NR' as Mr_Ms",
              "    , 'NOREL' as LastName",
              "    , 'NOREL' as FirstName",
              "    , 'NOREL' as MiddleName",
              "    , '0' as PrimaryPhone",
              "    , 'NOREL' as PrimaryEmail",
              "    , 'NOREL' as PrimaryAddress",
              "    , 'NOREL' as PrimaryAddressLine2",
              "    , 'NOREL' as PrimaryAddressCity",
              "    , 'NOREL' as PrimaryAddressProvinceState",
              "    , 'NOREL' as PrimaryAddressCountry",
              "    , 'NOREL' as PrimaryPostalZip",
              "    , 'NOREL' as Status",
              "    , TO_DATE('2900-01-01', 'YYYY-MM-DD') as StatusDate",
              "    , TO_DATE('2900-01-01', 'YYYY-MM-DD') as StatusExpiryDate",
              "    , 'NOREL' as Reason",
              "    , TO_DATE('2900-01-01', 'YYYY-MM-DD') as CustomerSince",
              "    , '0' as ConsumerFlag",
              "    , '0' as UnverifiedFlag",
              "    , 'NOREL' as Comments",
              "    , 'NOREL' as PreferredCommunications",
              "    , TO_DATE('2900-01-01', 'YYYY-MM-DD') as Created",
              "    , 'NOREL' as CreatedBy",
              "    , TO_DATE('2900-01-01', 'YYYY-MM-DD') as LastUpdatedThisDatabase",
              "    , TO_DATE('2900-01-01', 'YYYY-MM-DD') as LastUpdated",
              "    , 'NOREL' as LastUpdatedBy from dual) dimCustomer where CustomerNumber not in (",
              "    '10000163',",
              "'10000585',",
              "'21',",
              "'10000581',",
              "'10001602',",
              "'10001322')</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "dimSubscription",
        "columns": [
          {
            "name": "SUBSCRIPTIONID",
            "dataType": "string",
            "isUnique": true,
            "isKey": true,
            "sourceColumn": "SUBSCRIPTIONID",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "TYPE",
            "dataType": "string",
            "sourceColumn": "TYPE",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "DESCRIPTION",
            "dataType": "string",
            "sourceColumn": "DESCRIPTION",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SERVICENOTICEGROUP",
            "dataType": "string",
            "sourceColumn": "SERVICENOTICEGROUP",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SERVICENOTICEROUTEID",
            "dataType": "string",
            "sourceColumn": "SERVICENOTICEROUTEID",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SERVICENOTICEROUTE",
            "dataType": "string",
            "sourceColumn": "SERVICENOTICEROUTE",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "CONTACTMETHOD",
            "dataType": "string",
            "sourceColumn": "CONTACTMETHOD",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SOURCE",
            "dataType": "string",
            "sourceColumn": "SOURCE",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "COMMENTS",
            "dataType": "string",
            "sourceColumn": "COMMENTS",
            "sourceProviderType": "VarChar"
          }
        ],
        "partitions": [
          {
            "name": "dimSubscription",
            "dataView": "full",
            "source": {
              "query": [
                "select ",
                "    SUBSCRIPTION.ROW_ID as SubscriptionID",
                "    , SUBSCRIPTION.SUBTYPE_CD as Type",
                "    , SUBSCRIPTION.DESC_TEXT as Description",
                "    , SUBSCRIPTION.X_BCF_SUBS_GROUP as ServiceNoticeGroup",
                "    , SUBSCRIPTION.SEG_TYPE_CD as ServiceNoticeRouteID ",
                "    , SUBSCRIPTION.X_BCF_SUBS_ROUTE as ServiceNoticeRoute",
                "    , SUBSCRIPTION.MATCH_TYPE_CD as ContactMethod",
                "    , SUBSCRIPTION.FILE_SRC_TYPE as Source",
                "    , SUBSCRIPTION.NAME as Comments",
                "    from BCFSBLTST.S_CALL_LST SUBSCRIPTION",
                "union",
                "select ",
                "    'NOREL' as SubscriptionID",
                "    , 'NOREL' as Type",
                "    , 'NOREL' as Description",
                "    , 'NOREL' as ServiceNoticeGroup",
                "    , 'NOREL' as ServiceNoticeRouteID ",
                "    , 'NOREL' as ServiceNoticeRoute",
                "    , 'NOREL' as ContactMethod",
                "    , 'NOREL' as Source",
                "    , 'NOREL' as Comments",
                "from dual"
              ],
              "dataSource": "CRM"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select ",
                  "    SUBSCRIPTION.ROW_ID as SubscriptionID",
                  "    , SUBSCRIPTION.SUBTYPE_CD as Type",
                  "    , SUBSCRIPTION.DESC_TEXT as Description",
                  "    , SUBSCRIPTION.X_BCF_SUBS_GROUP as ServiceNoticeGroup",
                  "    , SUBSCRIPTION.SEG_TYPE_CD as ServiceNoticeRouteID ",
                  "    , SUBSCRIPTION.X_BCF_SUBS_ROUTE as ServiceNoticeRoute",
                  "    , SUBSCRIPTION.MATCH_TYPE_CD as ContactMethod",
                  "    , SUBSCRIPTION.FILE_SRC_TYPE as Source",
                  "    , SUBSCRIPTION.NAME as Comments",
                  "    from BCFSBLTST.S_CALL_LST SUBSCRIPTION",
                  "union",
                  "select ",
                  "    'NOREL' as SubscriptionID",
                  "    , 'NOREL' as Type",
                  "    , 'NOREL' as Description",
                  "    , 'NOREL' as ServiceNoticeGroup",
                  "    , 'NOREL' as ServiceNoticeRouteID ",
                  "    , 'NOREL' as ServiceNoticeRoute",
                  "    , 'NOREL' as ContactMethod",
                  "    , 'NOREL' as Source",
                  "    , 'NOREL' as Comments",
                  "from dual</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select ",
              "    SUBSCRIPTION.ROW_ID as SubscriptionID",
              "    , SUBSCRIPTION.SUBTYPE_CD as Type",
              "    , SUBSCRIPTION.DESC_TEXT as Description",
              "    , SUBSCRIPTION.X_BCF_SUBS_GROUP as ServiceNoticeGroup",
              "    , SUBSCRIPTION.SEG_TYPE_CD as ServiceNoticeRouteID ",
              "    , SUBSCRIPTION.X_BCF_SUBS_ROUTE as ServiceNoticeRoute",
              "    , SUBSCRIPTION.MATCH_TYPE_CD as ContactMethod",
              "    , SUBSCRIPTION.FILE_SRC_TYPE as Source",
              "    , SUBSCRIPTION.NAME as Comments",
              "    from BCFSBLTST.S_CALL_LST SUBSCRIPTION",
              "union",
              "select ",
              "    'NOREL' as SubscriptionID",
              "    , 'NOREL' as Type",
              "    , 'NOREL' as Description",
              "    , 'NOREL' as ServiceNoticeGroup",
              "    , 'NOREL' as ServiceNoticeRouteID ",
              "    , 'NOREL' as ServiceNoticeRoute",
              "    , 'NOREL' as ContactMethod",
              "    , 'NOREL' as Source",
              "    , 'NOREL' as Comments",
              "from dual"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "dimSubscription"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select ",
              "    SUBSCRIPTION.ROW_ID as SubscriptionID",
              "    , SUBSCRIPTION.SUBTYPE_CD as Type",
              "    , SUBSCRIPTION.DESC_TEXT as Description",
              "    , SUBSCRIPTION.X_BCF_SUBS_GROUP as ServiceNoticeGroup",
              "    , SUBSCRIPTION.SEG_TYPE_CD as ServiceNoticeRouteID ",
              "    , SUBSCRIPTION.X_BCF_SUBS_ROUTE as ServiceNoticeRoute",
              "    , SUBSCRIPTION.MATCH_TYPE_CD as ContactMethod",
              "    , SUBSCRIPTION.FILE_SRC_TYPE as Source",
              "    , SUBSCRIPTION.NAME as Comments",
              "    from BCFSBLTST.S_CALL_LST SUBSCRIPTION",
              "union",
              "select ",
              "    'NOREL' as SubscriptionID",
              "    , 'NOREL' as Type",
              "    , 'NOREL' as Description",
              "    , 'NOREL' as ServiceNoticeGroup",
              "    , 'NOREL' as ServiceNoticeRouteID ",
              "    , 'NOREL' as ServiceNoticeRoute",
              "    , 'NOREL' as ContactMethod",
              "    , 'NOREL' as Source",
              "    , 'NOREL' as Comments",
              "from dual</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "factSubscription",
        "isHidden": true,
        "columns": [
          {
            "name": "SUBSCRIPTIONDATE",
            "dataType": "dateTime",
            "sourceColumn": "SUBSCRIPTIONDATE",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "SUBSCRIPTIONTIME",
            "dataType": "dateTime",
            "sourceColumn": "SUBSCRIPTIONTIME",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "USERID",
            "dataType": "string",
            "sourceColumn": "USERID",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "OPTOUTFULFILLEDDATE",
            "dataType": "dateTime",
            "sourceColumn": "OPTOUTFULFILLEDDATE",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "OPTOUTFULFILLEDTIME",
            "dataType": "dateTime",
            "sourceColumn": "OPTOUTFULFILLEDTIME",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "OPTOUTDATE",
            "dataType": "dateTime",
            "sourceColumn": "OPTOUTDATE",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "OPTOUTTIME",
            "dataType": "dateTime",
            "sourceColumn": "OPTOUTTIME",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "SUBSCRIPTIONFLAG",
            "dataType": "string",
            "sourceColumn": "SUBSCRIPTIONFLAG",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "AGREEMENTID",
            "dataType": "string",
            "sourceColumn": "AGREEMENTID",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "CONTACTID",
            "dataType": "string",
            "sourceColumn": "CONTACTID",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ACCOUNTID",
            "dataType": "string",
            "sourceColumn": "ACCOUNTID",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "FSUBSCRIPTIONID",
            "dataType": "string",
            "isUnique": true,
            "isKey": true,
            "sourceColumn": "FSUBSCRIPTIONID"
          },
          {
            "name": "SUBSCRIPTIONID",
            "dataType": "string",
            "sourceColumn": "SUBSCRIPTIONID"
          }
        ],
        "partitions": [
          {
            "name": "factSubscription",
            "dataView": "full",
            "source": {
              "query": [
                "select ",
                "    SUBSCRIPTION.ROW_ID as fSubscriptionID",
                "    ,SUBSCRIPTION.PURCH_DT as SubscriptionDate",
                "    , SUBSCRIPTION.X_SUBSCRIPTION_TIME as SubscriptionTime",
                "    ,SUBSCRIPTION.CREATED_BY as UserID",
                "    , SUBSCRIPTION.X_OPT_OUT_FUL_DATE as OptOutFulfilledDate",
                "    , SUBSCRIPTION.X_OPT_OUT_FUL_TIME as OptOutFulfilledTime",
                "    , SUBSCRIPTION.EXPIRATION_DT as OptOutDate",
                "    , SUBSCRIPTION.X_OPT_OUT_TIME as OptOutTime ",
                "    , SUBSCRIPTION.INCL_EMP_FLG as SubscriptionFlag",
                "    , SUBSCRIPTION.X_AGREE_ID as AgreementId",
                "    , COALESCE(CONTACT.ROW_ID, 'NOREL') as ContactId",
                "    , COALESCE(ACCNT.ROW_ID, 'NOREL') as AccountId",
                "    , COALESCE(AGREEMENT.ROW_ID, 'NOREL') as SubscriptionID",
                "    from BCFSBLTST.S_CALL_LST SUBSCRIPTION",
                "    left join BCFSBLTST.S_CONTACT CONTACT on SUBSCRIPTION.X_CONTACT_ID = CONTACT.ROW_ID",
                "    left join BCFSBLTST.S_ORG_EXT ACCNT on SUBSCRIPTION.X_ACCNT_ID = ACCNT.ROW_ID",
                "    left join BCFSBLTST.S_DOC_AGREE AGREEMENT on SUBSCRIPTION.X_AGREE_ID = AGREEMENT.ROW_ID"
              ],
              "dataSource": "CRM"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select ",
                  "    SUBSCRIPTION.ROW_ID as fSubscriptionID",
                  "    ,SUBSCRIPTION.PURCH_DT as SubscriptionDate",
                  "    , SUBSCRIPTION.X_SUBSCRIPTION_TIME as SubscriptionTime",
                  "    ,SUBSCRIPTION.CREATED_BY as UserID",
                  "    , SUBSCRIPTION.X_OPT_OUT_FUL_DATE as OptOutFulfilledDate",
                  "    , SUBSCRIPTION.X_OPT_OUT_FUL_TIME as OptOutFulfilledTime",
                  "    , SUBSCRIPTION.EXPIRATION_DT as OptOutDate",
                  "    , SUBSCRIPTION.X_OPT_OUT_TIME as OptOutTime ",
                  "    , SUBSCRIPTION.INCL_EMP_FLG as SubscriptionFlag",
                  "    , SUBSCRIPTION.X_AGREE_ID as AgreementId",
                  "    , COALESCE(CONTACT.ROW_ID, 'NOREL') as ContactId",
                  "    , COALESCE(ACCNT.ROW_ID, 'NOREL') as AccountId",
                  "    , COALESCE(AGREEMENT.ROW_ID, 'NOREL') as SubscriptionID",
                  "    from BCFSBLTST.S_CALL_LST SUBSCRIPTION",
                  "    left join BCFSBLTST.S_CONTACT CONTACT on SUBSCRIPTION.X_CONTACT_ID = CONTACT.ROW_ID",
                  "    left join BCFSBLTST.S_ORG_EXT ACCNT on SUBSCRIPTION.X_ACCNT_ID = ACCNT.ROW_ID",
                  "    left join BCFSBLTST.S_DOC_AGREE AGREEMENT on SUBSCRIPTION.X_AGREE_ID = AGREEMENT.ROW_ID</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select ",
              "    SUBSCRIPTION.ROW_ID as fSubscriptionID",
              "    ,SUBSCRIPTION.PURCH_DT as SubscriptionDate",
              "    , SUBSCRIPTION.X_SUBSCRIPTION_TIME as SubscriptionTime",
              "    ,SUBSCRIPTION.CREATED_BY as UserID",
              "    , SUBSCRIPTION.X_OPT_OUT_FUL_DATE as OptOutFulfilledDate",
              "    , SUBSCRIPTION.X_OPT_OUT_FUL_TIME as OptOutFulfilledTime",
              "    , SUBSCRIPTION.EXPIRATION_DT as OptOutDate",
              "    , SUBSCRIPTION.X_OPT_OUT_TIME as OptOutTime ",
              "    , SUBSCRIPTION.INCL_EMP_FLG as SubscriptionFlag",
              "    , SUBSCRIPTION.X_AGREE_ID as AgreementId",
              "    , COALESCE(CONTACT.ROW_ID, 'NOREL') as ContactId",
              "    , COALESCE(ACCNT.ROW_ID, 'NOREL') as AccountId",
              "    , COALESCE(AGREEMENT.ROW_ID, 'NOREL') as SubscriptionID",
              "    from BCFSBLTST.S_CALL_LST SUBSCRIPTION",
              "    left join BCFSBLTST.S_CONTACT CONTACT on SUBSCRIPTION.X_CONTACT_ID = CONTACT.ROW_ID",
              "    left join BCFSBLTST.S_ORG_EXT ACCNT on SUBSCRIPTION.X_ACCNT_ID = ACCNT.ROW_ID",
              "    left join BCFSBLTST.S_DOC_AGREE AGREEMENT on SUBSCRIPTION.X_AGREE_ID = AGREEMENT.ROW_ID"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "factSubscription"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select ",
              "    SUBSCRIPTION.ROW_ID as fSubscriptionID",
              "    ,SUBSCRIPTION.PURCH_DT as SubscriptionDate",
              "    , SUBSCRIPTION.X_SUBSCRIPTION_TIME as SubscriptionTime",
              "    ,SUBSCRIPTION.CREATED_BY as UserID",
              "    , SUBSCRIPTION.X_OPT_OUT_FUL_DATE as OptOutFulfilledDate",
              "    , SUBSCRIPTION.X_OPT_OUT_FUL_TIME as OptOutFulfilledTime",
              "    , SUBSCRIPTION.EXPIRATION_DT as OptOutDate",
              "    , SUBSCRIPTION.X_OPT_OUT_TIME as OptOutTime ",
              "    , SUBSCRIPTION.INCL_EMP_FLG as SubscriptionFlag",
              "    , SUBSCRIPTION.X_AGREE_ID as AgreementId",
              "    , COALESCE(CONTACT.ROW_ID, 'NOREL') as ContactId",
              "    , COALESCE(ACCNT.ROW_ID, 'NOREL') as AccountId",
              "    , COALESCE(AGREEMENT.ROW_ID, 'NOREL') as SubscriptionID",
              "    from BCFSBLTST.S_CALL_LST SUBSCRIPTION",
              "    left join BCFSBLTST.S_CONTACT CONTACT on SUBSCRIPTION.X_CONTACT_ID = CONTACT.ROW_ID",
              "    left join BCFSBLTST.S_ORG_EXT ACCNT on SUBSCRIPTION.X_ACCNT_ID = ACCNT.ROW_ID",
              "    left join BCFSBLTST.S_DOC_AGREE AGREEMENT on SUBSCRIPTION.X_AGREE_ID = AGREEMENT.ROW_ID</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "factAgreement",
        "isHidden": true,
        "columns": [
          {
            "name": "AGREEMENTSTARTDATE",
            "dataType": "dateTime",
            "sourceColumn": "AGREEMENTSTARTDATE",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "AGREEMENTENDDATE",
            "dataType": "dateTime",
            "sourceColumn": "AGREEMENTENDDATE",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "CONTACTID",
            "dataType": "string",
            "sourceColumn": "CONTACTID"
          },
          {
            "name": "FAGREEMENTID",
            "dataType": "string",
            "isUnique": true,
            "isKey": true,
            "sourceColumn": "FAGREEMENTID"
          },
          {
            "name": "AGREEMENTID",
            "dataType": "string",
            "sourceColumn": "AGREEMENTID"
          },
          {
            "name": "ACCOUNTID",
            "dataType": "string",
            "sourceColumn": "ACCOUNTID"
          }
        ],
        "partitions": [
          {
            "name": "factAgreement",
            "dataView": "full",
            "source": {
              "query": [
                "select ",
                "    AGREEMENT.ROW_ID || COALESCE(CONTACT.ROW_ID, 'NOREL') as fAgreementId",
                "    , AGREEMENT.EFF_START_DT as AgreementStartDate",
                "    , AGREEMENT.EFF_END_DT as AgreementEndDate",
                "    , AGREEMENT.ROW_ID as AgreementId",
                "    , COALESCE(CONTACT.ROW_ID, 'NOREL') as ContactID",
                "    , COALESCE(ACCNT.ROW_ID, 'NOREL') as AccountID",
                "from BCFSBLTST.S_DOC_AGREE AGREEMENT",
                "left join BCFSBLTST.S_CONTACT CONTACT",
                "        on AGREEMENT.ROW_ID = CONTACT.X_AGREE_ID",
                "left join BCFSBLTST.S_ORG_EXT ACCNT",
                "\ton AGREEMENT.TARGET_OU_ID = ACCNT.ROW_ID"
              ],
              "dataSource": "CRM"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select ",
                  "    AGREEMENT.ROW_ID || COALESCE(CONTACT.ROW_ID, 'NOREL') as fAgreementId",
                  "    , AGREEMENT.EFF_START_DT as AgreementStartDate",
                  "    , AGREEMENT.EFF_END_DT as AgreementEndDate",
                  "    , AGREEMENT.ROW_ID as AgreementId",
                  "    , COALESCE(CONTACT.ROW_ID, 'NOREL') as ContactID",
                  "    , COALESCE(ACCNT.ROW_ID, 'NOREL') as AccountID",
                  "from BCFSBLTST.S_DOC_AGREE AGREEMENT",
                  "left join BCFSBLTST.S_CONTACT CONTACT",
                  "        on AGREEMENT.ROW_ID = CONTACT.X_AGREE_ID",
                  "left join BCFSBLTST.S_ORG_EXT ACCNT",
                  "\ton AGREEMENT.TARGET_OU_ID = ACCNT.ROW_ID</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select ",
              "    AGREEMENT.ROW_ID || COALESCE(CONTACT.ROW_ID, 'NOREL') as fAgreementId",
              "    , AGREEMENT.EFF_START_DT as AgreementStartDate",
              "    , AGREEMENT.EFF_END_DT as AgreementEndDate",
              "    , AGREEMENT.ROW_ID as AgreementId",
              "    , COALESCE(CONTACT.ROW_ID, 'NOREL') as ContactID",
              "    , COALESCE(ACCNT.ROW_ID, 'NOREL') as AccountID",
              "from BCFSBLTST.S_DOC_AGREE AGREEMENT",
              "left join BCFSBLTST.S_CONTACT CONTACT",
              "        on AGREEMENT.ROW_ID = CONTACT.X_AGREE_ID",
              "left join BCFSBLTST.S_ORG_EXT ACCNT",
              "\ton AGREEMENT.TARGET_OU_ID = ACCNT.ROW_ID"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "factAgreement"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select ",
              "    AGREEMENT.ROW_ID || COALESCE(CONTACT.ROW_ID, 'NOREL') as fAgreementId",
              "    , AGREEMENT.EFF_START_DT as AgreementStartDate",
              "    , AGREEMENT.EFF_END_DT as AgreementEndDate",
              "    , AGREEMENT.ROW_ID as AgreementId",
              "    , COALESCE(CONTACT.ROW_ID, 'NOREL') as ContactID",
              "    , COALESCE(ACCNT.ROW_ID, 'NOREL') as AccountID",
              "from BCFSBLTST.S_DOC_AGREE AGREEMENT",
              "left join BCFSBLTST.S_CONTACT CONTACT",
              "        on AGREEMENT.ROW_ID = CONTACT.X_AGREE_ID",
              "left join BCFSBLTST.S_ORG_EXT ACCNT",
              "\ton AGREEMENT.TARGET_OU_ID = ACCNT.ROW_ID</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "dimAgreement",
        "isHidden": true,
        "columns": [
          {
            "name": "AGREEMENTID",
            "dataType": "string",
            "isUnique": true,
            "isKey": true,
            "sourceColumn": "AGREEMENTID",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "AGREEMENTNUMBER",
            "dataType": "string",
            "sourceColumn": "AGREEMENTNUMBER",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "NAME",
            "dataType": "string",
            "sourceColumn": "NAME",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "AMENDMENT",
            "dataType": "string",
            "sourceColumn": "AMENDMENT",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "AGREEMENTTYPE",
            "dataType": "string",
            "sourceColumn": "AGREEMENTTYPE",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "AGREEMENTSUBTYPE",
            "dataType": "string",
            "sourceColumn": "AGREEMENTSUBTYPE",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "AGREEMENTSTATUS",
            "dataType": "string",
            "sourceColumn": "AGREEMENTSTATUS",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "REVISIONNUMBER",
            "dataType": "double",
            "sourceColumn": "REVISIONNUMBER",
            "sourceProviderType": "Decimal"
          },
          {
            "name": "NOTES",
            "dataType": "string",
            "sourceColumn": "NOTES",
            "sourceProviderType": "VarChar"
          }
        ],
        "partitions": [
          {
            "name": "dimAgreement",
            "dataView": "full",
            "source": {
              "query": [
                "select ",
                "    AGREEMENT.ROW_ID as AgreementId",
                "    , AGREEMENT.AGREE_NUM as AgreementNumber",
                "    , AGREEMENT.NAME as Name",
                "    , AGREEMENT.AMENDMENT as Amendment",
                "    , AGREEMENT.AGREE_CD as AgreementType",
                "    , X_AGREE_SUB_CD as AgreementSubtype",
                "    , AGREEMENT.STAT_CD as AgreementStatus",
                "    , AGREEMENT.REV_NUM as RevisionNumber",
                "    , AGREEMENT.DESC_TEXT as Notes",
                "from BCFSBLTST.S_DOC_AGREE AGREEMENT",
                "union",
                "select ",
                "    'NOREL' as AgreementId",
                "    , '0' as AgreementNumber",
                "    , 'NOREL' as Name",
                "    , 'NOREL' as Amendment",
                "    , 'NOREL' as AgreementType",
                "    , 'NOREL' as AgreementSubtype",
                "    , 'NOREL' as AgreementStatus",
                "    , 0 as RevisionNumber",
                "    , 'NOREL' as Notes",
                "from dual"
              ],
              "dataSource": "CRM"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select ",
                  "    AGREEMENT.ROW_ID as AgreementId",
                  "    , AGREEMENT.AGREE_NUM as AgreementNumber",
                  "    , AGREEMENT.NAME as Name",
                  "    , AGREEMENT.AMENDMENT as Amendment",
                  "    , AGREEMENT.AGREE_CD as AgreementType",
                  "    , X_AGREE_SUB_CD as AgreementSubtype",
                  "    , AGREEMENT.STAT_CD as AgreementStatus",
                  "    , AGREEMENT.REV_NUM as RevisionNumber",
                  "    , AGREEMENT.DESC_TEXT as Notes",
                  "from BCFSBLTST.S_DOC_AGREE AGREEMENT",
                  "union",
                  "select ",
                  "    'NOREL' as AgreementId",
                  "    , '0' as AgreementNumber",
                  "    , 'NOREL' as Name",
                  "    , 'NOREL' as Amendment",
                  "    , 'NOREL' as AgreementType",
                  "    , 'NOREL' as AgreementSubtype",
                  "    , 'NOREL' as AgreementStatus",
                  "    , 0 as RevisionNumber",
                  "    , 'NOREL' as Notes",
                  "from dual</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select ",
              "    AGREEMENT.ROW_ID as AgreementId",
              "    , AGREEMENT.AGREE_NUM as AgreementNumber",
              "    , AGREEMENT.NAME as Name",
              "    , AGREEMENT.AMENDMENT as Amendment",
              "    , AGREEMENT.AGREE_CD as AgreementType",
              "    , X_AGREE_SUB_CD as AgreementSubtype",
              "    , AGREEMENT.STAT_CD as AgreementStatus",
              "    , AGREEMENT.REV_NUM as RevisionNumber",
              "    , AGREEMENT.DESC_TEXT as Notes",
              "from BCFSBLTST.S_DOC_AGREE AGREEMENT",
              "union",
              "select ",
              "    'NOREL' as AgreementId",
              "    , '0' as AgreementNumber",
              "    , 'NOREL' as Name",
              "    , 'NOREL' as Amendment",
              "    , 'NOREL' as AgreementType",
              "    , 'NOREL' as AgreementSubtype",
              "    , 'NOREL' as AgreementStatus",
              "    , 0 as RevisionNumber",
              "    , 'NOREL' as Notes",
              "from dual"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "dimAgreement"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select ",
              "    AGREEMENT.ROW_ID as AgreementId",
              "    , AGREEMENT.AGREE_NUM as AgreementNumber",
              "    , AGREEMENT.NAME as Name",
              "    , AGREEMENT.AMENDMENT as Amendment",
              "    , AGREEMENT.AGREE_CD as AgreementType",
              "    , X_AGREE_SUB_CD as AgreementSubtype",
              "    , AGREEMENT.STAT_CD as AgreementStatus",
              "    , AGREEMENT.REV_NUM as RevisionNumber",
              "    , AGREEMENT.DESC_TEXT as Notes",
              "from BCFSBLTST.S_DOC_AGREE AGREEMENT",
              "union",
              "select ",
              "    'NOREL' as AgreementId",
              "    , '0' as AgreementNumber",
              "    , 'NOREL' as Name",
              "    , 'NOREL' as Amendment",
              "    , 'NOREL' as AgreementType",
              "    , 'NOREL' as AgreementSubtype",
              "    , 'NOREL' as AgreementStatus",
              "    , 0 as RevisionNumber",
              "    , 'NOREL' as Notes",
              "from dual</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "factAddress",
        "isHidden": true,
        "columns": [
          {
            "name": "FADDRESSID",
            "dataType": "string",
            "isUnique": true,
            "isKey": true,
            "sourceColumn": "FADDRESSID",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "CONTACTID",
            "dataType": "string",
            "sourceColumn": "CONTACTID",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ACCOUNTID",
            "dataType": "string",
            "sourceColumn": "ACCOUNTID",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ADDRESSID",
            "dataType": "string",
            "sourceColumn": "ADDRESSID",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "CREATEDDATE",
            "dataType": "dateTime",
            "sourceColumn": "CREATEDDATE",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "CREATEDBYUSERID",
            "dataType": "string",
            "sourceColumn": "CREATEDBYUSERID",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "LASTUPDATEDDATE",
            "dataType": "dateTime",
            "sourceColumn": "LASTUPDATEDDATE",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "LASTUPDATEDUSERID",
            "dataType": "string",
            "sourceColumn": "LASTUPDATEDUSERID",
            "sourceProviderType": "VarChar"
          }
        ],
        "partitions": [
          {
            "name": "factAddress",
            "dataView": "full",
            "source": {
              "query": [
                "select",
                "    ADDRESS.ROW_ID as fAddressID",
                "    , COALESCE(CONTACT.ROW_ID, 'NOREL') as ContactID",
                "    , COALESCE(ACCNT.ROW_ID, 'NOREL') as AccountID",
                "    , COALESCE(ADDRESSES.ROW_ID, 'NOREL') as AddressID",
                "    , ADDRESS.CREATED as CreatedDate",
                "    , ADDRESS.CREATED_BY as CreatedByUserID",
                "    , ADDRESS.LAST_UPD as LastUpdatedDate",
                "    , ADDRESS.LAST_UPD_BY as LastUpdatedUSerId",
                "    from BCFSBLTST.S_CON_ADDR ADDRESS",
                "    left join BCFSBLTST.S_CONTACT CONTACT",
                "        on ADDRESS.CONTACT_ID = CONTACT.ROW_ID",
                "    left join BCFSBLTST.S_ORG_EXT ACCNT",
                "        on ADDRESS.ACCNT_ID = ACCNT.ROW_ID",
                "    left join BCFSBLTST.S_ADDR_PER ADDRESSES",
                "        on ADDRESS.ADDR_PER_ID = ADDRESSES.ROW_ID"
              ],
              "dataSource": "CRM"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select",
                  "    ADDRESS.ROW_ID as fAddressID",
                  "    , COALESCE(CONTACT.ROW_ID, 'NOREL') as ContactID",
                  "    , COALESCE(ACCNT.ROW_ID, 'NOREL') as AccountID",
                  "    , COALESCE(ADDRESSES.ROW_ID, 'NOREL') as AddressID",
                  "    , ADDRESS.CREATED as CreatedDate",
                  "    , ADDRESS.CREATED_BY as CreatedByUserID",
                  "    , ADDRESS.LAST_UPD as LastUpdatedDate",
                  "    , ADDRESS.LAST_UPD_BY as LastUpdatedUSerId",
                  "    from BCFSBLTST.S_CON_ADDR ADDRESS",
                  "    left join BCFSBLTST.S_CONTACT CONTACT",
                  "        on ADDRESS.CONTACT_ID = CONTACT.ROW_ID",
                  "    left join BCFSBLTST.S_ORG_EXT ACCNT",
                  "        on ADDRESS.ACCNT_ID = ACCNT.ROW_ID",
                  "    left join BCFSBLTST.S_ADDR_PER ADDRESSES",
                  "        on ADDRESS.ADDR_PER_ID = ADDRESSES.ROW_ID</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "measures": [
          {
            "name": "AddressCount",
            "expression": "COUNTA([FADDRESSID])"
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select",
              "    ADDRESS.ROW_ID as fAddressID",
              "    , COALESCE(CONTACT.ROW_ID, 'NOREL') as ContactID",
              "    , COALESCE(ACCNT.ROW_ID, 'NOREL') as AccountID",
              "    , COALESCE(ADDRESSES.ROW_ID, 'NOREL') as AddressID",
              "    , ADDRESS.CREATED as CreatedDate",
              "    , ADDRESS.CREATED_BY as CreatedByUserID",
              "    , ADDRESS.LAST_UPD as LastUpdatedDate",
              "    , ADDRESS.LAST_UPD_BY as LastUpdatedUSerId",
              "    from BCFSBLTST.S_CON_ADDR ADDRESS",
              "    left join BCFSBLTST.S_CONTACT CONTACT",
              "        on ADDRESS.CONTACT_ID = CONTACT.ROW_ID",
              "    left join BCFSBLTST.S_ORG_EXT ACCNT",
              "        on ADDRESS.ACCNT_ID = ACCNT.ROW_ID",
              "    left join BCFSBLTST.S_ADDR_PER ADDRESSES",
              "        on ADDRESS.ADDR_PER_ID = ADDRESSES.ROW_ID"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "factAddress"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select",
              "    ADDRESS.ROW_ID as fAddressID",
              "    , COALESCE(CONTACT.ROW_ID, 'NOREL') as ContactID",
              "    , COALESCE(ACCNT.ROW_ID, 'NOREL') as AccountID",
              "    , COALESCE(ADDRESSES.ROW_ID, 'NOREL') as AddressID",
              "    , ADDRESS.CREATED as CreatedDate",
              "    , ADDRESS.CREATED_BY as CreatedByUserID",
              "    , ADDRESS.LAST_UPD as LastUpdatedDate",
              "    , ADDRESS.LAST_UPD_BY as LastUpdatedUSerId",
              "    from BCFSBLTST.S_CON_ADDR ADDRESS",
              "    left join BCFSBLTST.S_CONTACT CONTACT",
              "        on ADDRESS.CONTACT_ID = CONTACT.ROW_ID",
              "    left join BCFSBLTST.S_ORG_EXT ACCNT",
              "        on ADDRESS.ACCNT_ID = ACCNT.ROW_ID",
              "    left join BCFSBLTST.S_ADDR_PER ADDRESSES",
              "        on ADDRESS.ADDR_PER_ID = ADDRESSES.ROW_ID</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "dimAddress",
        "isHidden": true,
        "columns": [
          {
            "name": "ADDRESSID",
            "dataType": "string",
            "isUnique": true,
            "isKey": true,
            "sourceColumn": "ADDRESSID",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "NAME",
            "dataType": "string",
            "sourceColumn": "NAME",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ADDRESS",
            "dataType": "string",
            "sourceColumn": "ADDRESS",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ADDRESSLINE2",
            "dataType": "string",
            "sourceColumn": "ADDRESSLINE2",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "CITY",
            "dataType": "string",
            "sourceColumn": "CITY",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "COUNTRY",
            "dataType": "string",
            "sourceColumn": "COUNTRY",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "PROVINCESTATE",
            "dataType": "string",
            "sourceColumn": "PROVINCESTATE",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "POSTALZIP",
            "dataType": "string",
            "sourceColumn": "POSTALZIP",
            "sourceProviderType": "VarChar"
          }
        ],
        "partitions": [
          {
            "name": "dimAddress",
            "dataView": "full",
            "source": {
              "query": [
                "select ",
                "    ROW_ID as AddressID",
                "    , ADDR_NAME as Name",
                "    , ADDR as Address",
                "    , ADDR_LINE_2 as AddressLine2",
                "    , CITY as City",
                "    , COUNTRY as Country",
                "    , STATE as ProvinceState",
                "    , ZIPCODE as PostalZip",
                "     from BCFSBLTST.S_ADDR_PER",
                "union",
                "select 'NOREL' as AddressID",
                "    , 'NOREL' as Name",
                "    , 'NOREL' as Address",
                "    , 'NOREL' as AddressLine2",
                "    , 'NOREL' as City",
                "    , 'NOREL' as Country",
                "    , 'NOREL' as ProvinceState",
                "    , 'NOREL' as PostalZip",
                "    from dual"
              ],
              "dataSource": "CRM"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select ",
                  "    ROW_ID as AddressID",
                  "    , ADDR_NAME as Name",
                  "    , ADDR as Address",
                  "    , ADDR_LINE_2 as AddressLine2",
                  "    , CITY as City",
                  "    , COUNTRY as Country",
                  "    , STATE as ProvinceState",
                  "    , ZIPCODE as PostalZip",
                  "     from BCFSBLTST.S_ADDR_PER",
                  "union",
                  "select 'NOREL' as AddressID",
                  "    , 'NOREL' as Name",
                  "    , 'NOREL' as Address",
                  "    , 'NOREL' as AddressLine2",
                  "    , 'NOREL' as City",
                  "    , 'NOREL' as Country",
                  "    , 'NOREL' as ProvinceState",
                  "    , 'NOREL' as PostalZip",
                  "    from dual</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select ",
              "    ROW_ID as AddressID",
              "    , ADDR_NAME as Name",
              "    , ADDR as Address",
              "    , ADDR_LINE_2 as AddressLine2",
              "    , CITY as City",
              "    , COUNTRY as Country",
              "    , STATE as ProvinceState",
              "    , ZIPCODE as PostalZip",
              "     from BCFSBLTST.S_ADDR_PER",
              "union",
              "select 'NOREL' as AddressID",
              "    , 'NOREL' as Name",
              "    , 'NOREL' as Address",
              "    , 'NOREL' as AddressLine2",
              "    , 'NOREL' as City",
              "    , 'NOREL' as Country",
              "    , 'NOREL' as ProvinceState",
              "    , 'NOREL' as PostalZip",
              "    from dual"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "dimAddress"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select ",
              "    ROW_ID as AddressID",
              "    , ADDR_NAME as Name",
              "    , ADDR as Address",
              "    , ADDR_LINE_2 as AddressLine2",
              "    , CITY as City",
              "    , COUNTRY as Country",
              "    , STATE as ProvinceState",
              "    , ZIPCODE as PostalZip",
              "     from BCFSBLTST.S_ADDR_PER",
              "union",
              "select 'NOREL' as AddressID",
              "    , 'NOREL' as Name",
              "    , 'NOREL' as Address",
              "    , 'NOREL' as AddressLine2",
              "    , 'NOREL' as City",
              "    , 'NOREL' as Country",
              "    , 'NOREL' as ProvinceState",
              "    , 'NOREL' as PostalZip",
              "    from dual</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "dimAccount",
        "columns": [
          {
            "name": "ACCOUNTID",
            "dataType": "string",
            "isUnique": true,
            "isKey": true,
            "sourceColumn": "ACCOUNTID",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "NAME",
            "dataType": "string",
            "sourceColumn": "NAME",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "LOCATION",
            "dataType": "string",
            "sourceColumn": "LOCATION",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ACCOUNTSTATUS",
            "dataType": "string",
            "sourceColumn": "ACCOUNTSTATUS",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "FINSACCOUNTNUMBER",
            "dataType": "string",
            "sourceColumn": "FINSACCOUNTNUMBER",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ACCOUNTSINCE",
            "dataType": "dateTime",
            "sourceColumn": "ACCOUNTSINCE",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "REASONREF",
            "dataType": "string",
            "sourceColumn": "REASONREF",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "RESTRICTEDFLAG",
            "dataType": "string",
            "sourceColumn": "RESTRICTEDFLAG",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ACCOUNTSTATUSDATE",
            "dataType": "dateTime",
            "sourceColumn": "ACCOUNTSTATUSDATE",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "STATUSEXPIRYDATE",
            "dataType": "dateTime",
            "sourceColumn": "STATUSEXPIRYDATE",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "CSDACCOUNTFLAG",
            "dataType": "string",
            "sourceColumn": "CSDACCOUNTFLAG",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ACCOUNTWEBTYPE",
            "dataType": "string",
            "sourceColumn": "ACCOUNTWEBTYPE",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "NOTIFY",
            "dataType": "dateTime",
            "sourceColumn": "NOTIFY",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "PARENTACCOUNTID",
            "dataType": "string",
            "sourceColumn": "PARENTACCOUNTID"
          },
          {
            "type": "calculated",
            "name": "HierarchyPath",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": " PATH([AccountId], [ParentAccountID])"
          },
          {
            "type": "calculated",
            "name": "ParentAccountName",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": " LOOKUPVALUE ([Name], [AccountId], PATHITEM ([HierarchyPath], 1))"
          },
          {
            "name": "ACCOUNTNUMBER",
            "dataType": "string",
            "sourceColumn": "ACCOUNTNUMBER"
          },
          {
            "type": "calculated",
            "name": "AcccountName",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": " LOOKUPVALUE ([Name], [AccountId], PATHITEM ([HierarchyPath], 2))"
          },
          {
            "name": "PRIMARYADDRESS",
            "dataType": "string",
            "sourceColumn": "PRIMARYADDRESS"
          },
          {
            "name": "PRIMARYADDRESSLINE2",
            "dataType": "string",
            "sourceColumn": "PRIMARYADDRESSLINE2"
          },
          {
            "name": "PRIMARYADDRESSCITY",
            "dataType": "string",
            "sourceColumn": "PRIMARYADDRESSCITY"
          },
          {
            "name": "PRIMARYADDRESSPROVINCESTATE",
            "dataType": "string",
            "sourceColumn": "PRIMARYADDRESSPROVINCESTATE"
          },
          {
            "name": "PRIMARYADDRESSCOUNTRY",
            "dataType": "string",
            "sourceColumn": "PRIMARYADDRESSCOUNTRY"
          },
          {
            "name": "PRIMARYPOSTALZIP",
            "dataType": "string",
            "sourceColumn": "PRIMARYPOSTALZIP"
          }
        ],
        "partitions": [
          {
            "name": "dimAccount",
            "dataView": "full",
            "source": {
              "query": [
                "select ",
                "        ACCOUNT.ROW_ID as AccountID",
                "        , case ACCOUNT.MASTER_OU_ID when ACCOUNT.ROW_ID then NULL else ACCOUNT.MASTER_OU_ID end as ParentAccountID",
                "        , COALESCE(TO_CHAR(ACCOUNT.X_BCF_CUST_NUM), ACCOUNT.ROW_ID) as AccountNumber\t",
                "        , ACCOUNT.NAME as Name",
                "        , ADDRESS.ADDR as PrimaryAddress",
                "    , ADDRESS.ADDR_LINE_2 as PrimaryAddressLine2",
                "    , ADDRESS.CITY as PrimaryAddressCity",
                "    , ADDRESS.STATE as PrimaryAddressProvinceState",
                "    , ADDRESS.COUNTRY as PrimaryAddressCountry",
                "    , ADDRESS.ZIPCODE as PrimaryPostalZip",
                "        , ACCOUNT.LOC as Location",
                "        , ACCOUNT.CUST_STAT_CD as AccountStatus",
                "        , ACCOUNTX.ATTRIB_07 as FINSAccountNumber",
                "        , ACCOUNT.CUST_SINCE_DT as AccountSince",
                "        , ACCOUNTX.ATTRIB_40 as ReasonRef",
                "        , ACCOUNT.X_BCF_RESTRICTED_FLG as RestrictedFlag",
                "        , ACCOUNT.STAT_CHG_DT as AccountStatusDate",
                "        , ACCOUNTX.ATTRIB_29 as StatusExpiryDate",
                "        , ACCOUNT.X_BCF_CSD_ACCOUNT_FLAG as CSDAccountFlag",
                "        , ACCOUNT.X_BCF_ACC_WEB_TYPE as AccountWebType",
                "        , ACCOUNT.X_BCF_NOTIFY as Notify",
                "from BCFSBLTST.S_ORG_EXT ACCOUNT",
                "left join BCFSBLTST.S_ORG_EXT_X ACCOUNTX",
                "    on ACCOUNT.ROW_ID = ACCOUNTX.PAR_ROW_ID ",
                "left join BCFSBLTST.S_ADDR_PER ADDRESS",
                "    on ACCOUNT.PR_ADDR_ID = ADDRESS.ROW_ID",
                "union",
                "select",
                "    'NOREL' as AccountID",
                "        , 'NOREL' as ParentAccountID",
                "        , 'NOREL' as AccountNumber",
                "        , 'NOREL' as Name",
                "        , 'NOREL' as PrimaryAddress",
                "    , 'NOREL' as PrimaryAddressLine2",
                "    , 'NOREL' as PrimaryAddressCity",
                "    , 'NOREL' as PrimaryAddressProvinceState",
                "    , 'NOREL' as PrimaryAddressCountry",
                "    , 'NOREL' as PrimaryPostalZip",
                "        , 'NOREL' as Location",
                "        , 'NOREL' as AccountStatus",
                "        , 'NOREL' as FINSAccountNumber",
                "        , TO_DATE('1900-01-01', 'YYYY-MM-DD') as AccountSince",
                "        , 'NOREL' as ReasonRef",
                "        , '0' as RestrictedFlag",
                "        , TO_DATE('1900-01-01', 'YYYY-MM-DD') as AccountStatusDate",
                "        , TO_DATE('1900-01-01', 'YYYY-MM-DD') as StatusExpiryDate",
                "        , '0' as CSDAccountFlag",
                "        , 'NOREL' as AccountWebType",
                "        , TO_DATE('1900-01-01', 'YYYY-MM-DD') as Notify",
                "    from dual"
              ],
              "dataSource": "CRM"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select ",
                  "        ACCOUNT.ROW_ID as AccountID",
                  "        , case ACCOUNT.MASTER_OU_ID when ACCOUNT.ROW_ID then NULL else ACCOUNT.MASTER_OU_ID end as ParentAccountID",
                  "        , COALESCE(TO_CHAR(ACCOUNT.X_BCF_CUST_NUM), ACCOUNT.ROW_ID) as AccountNumber\t",
                  "        , ACCOUNT.NAME as Name",
                  "        , ADDRESS.ADDR as PrimaryAddress",
                  "    , ADDRESS.ADDR_LINE_2 as PrimaryAddressLine2",
                  "    , ADDRESS.CITY as PrimaryAddressCity",
                  "    , ADDRESS.STATE as PrimaryAddressProvinceState",
                  "    , ADDRESS.COUNTRY as PrimaryAddressCountry",
                  "    , ADDRESS.ZIPCODE as PrimaryPostalZip",
                  "        , ACCOUNT.LOC as Location",
                  "        , ACCOUNT.CUST_STAT_CD as AccountStatus",
                  "        , ACCOUNTX.ATTRIB_07 as FINSAccountNumber",
                  "        , ACCOUNT.CUST_SINCE_DT as AccountSince",
                  "        , ACCOUNTX.ATTRIB_40 as ReasonRef",
                  "        , ACCOUNT.X_BCF_RESTRICTED_FLG as RestrictedFlag",
                  "        , ACCOUNT.STAT_CHG_DT as AccountStatusDate",
                  "        , ACCOUNTX.ATTRIB_29 as StatusExpiryDate",
                  "        , ACCOUNT.X_BCF_CSD_ACCOUNT_FLAG as CSDAccountFlag",
                  "        , ACCOUNT.X_BCF_ACC_WEB_TYPE as AccountWebType",
                  "        , ACCOUNT.X_BCF_NOTIFY as Notify",
                  "from BCFSBLTST.S_ORG_EXT ACCOUNT",
                  "left join BCFSBLTST.S_ORG_EXT_X ACCOUNTX",
                  "    on ACCOUNT.ROW_ID = ACCOUNTX.PAR_ROW_ID ",
                  "left join BCFSBLTST.S_ADDR_PER ADDRESS",
                  "    on ACCOUNT.PR_ADDR_ID = ADDRESS.ROW_ID",
                  "union",
                  "select",
                  "    'NOREL' as AccountID",
                  "        , 'NOREL' as ParentAccountID",
                  "        , 'NOREL' as AccountNumber",
                  "        , 'NOREL' as Name",
                  "        , 'NOREL' as PrimaryAddress",
                  "    , 'NOREL' as PrimaryAddressLine2",
                  "    , 'NOREL' as PrimaryAddressCity",
                  "    , 'NOREL' as PrimaryAddressProvinceState",
                  "    , 'NOREL' as PrimaryAddressCountry",
                  "    , 'NOREL' as PrimaryPostalZip",
                  "        , 'NOREL' as Location",
                  "        , 'NOREL' as AccountStatus",
                  "        , 'NOREL' as FINSAccountNumber",
                  "        , TO_DATE('1900-01-01', 'YYYY-MM-DD') as AccountSince",
                  "        , 'NOREL' as ReasonRef",
                  "        , '0' as RestrictedFlag",
                  "        , TO_DATE('1900-01-01', 'YYYY-MM-DD') as AccountStatusDate",
                  "        , TO_DATE('1900-01-01', 'YYYY-MM-DD') as StatusExpiryDate",
                  "        , '0' as CSDAccountFlag",
                  "        , 'NOREL' as AccountWebType",
                  "        , TO_DATE('1900-01-01', 'YYYY-MM-DD') as Notify",
                  "    from dual</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "hierarchies": [
          {
            "name": "AccountHierarchy",
            "levels": [
              {
                "name": "ParentAccountName",
                "ordinal": 0,
                "column": "ParentAccountName"
              },
              {
                "name": "AcccountName",
                "ordinal": 1,
                "column": "AcccountName"
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select ",
              "        ACCOUNT.ROW_ID as AccountID",
              "        , case ACCOUNT.MASTER_OU_ID when ACCOUNT.ROW_ID then NULL else ACCOUNT.MASTER_OU_ID end as ParentAccountID",
              "        , COALESCE(TO_CHAR(ACCOUNT.X_BCF_CUST_NUM), ACCOUNT.ROW_ID) as AccountNumber\t",
              "        , ACCOUNT.NAME as Name",
              "        , ADDRESS.ADDR as PrimaryAddress",
              "    , ADDRESS.ADDR_LINE_2 as PrimaryAddressLine2",
              "    , ADDRESS.CITY as PrimaryAddressCity",
              "    , ADDRESS.STATE as PrimaryAddressProvinceState",
              "    , ADDRESS.COUNTRY as PrimaryAddressCountry",
              "    , ADDRESS.ZIPCODE as PrimaryPostalZip",
              "        , ACCOUNT.LOC as Location",
              "        , ACCOUNT.CUST_STAT_CD as AccountStatus",
              "        , ACCOUNTX.ATTRIB_07 as FINSAccountNumber",
              "        , ACCOUNT.CUST_SINCE_DT as AccountSince",
              "        , ACCOUNTX.ATTRIB_40 as ReasonRef",
              "        , ACCOUNT.X_BCF_RESTRICTED_FLG as RestrictedFlag",
              "        , ACCOUNT.STAT_CHG_DT as AccountStatusDate",
              "        , ACCOUNTX.ATTRIB_29 as StatusExpiryDate",
              "        , ACCOUNT.X_BCF_CSD_ACCOUNT_FLAG as CSDAccountFlag",
              "        , ACCOUNT.X_BCF_ACC_WEB_TYPE as AccountWebType",
              "        , ACCOUNT.X_BCF_NOTIFY as Notify",
              "from BCFSBLTST.S_ORG_EXT ACCOUNT",
              "left join BCFSBLTST.S_ORG_EXT_X ACCOUNTX",
              "    on ACCOUNT.ROW_ID = ACCOUNTX.PAR_ROW_ID ",
              "left join BCFSBLTST.S_ADDR_PER ADDRESS",
              "    on ACCOUNT.PR_ADDR_ID = ADDRESS.ROW_ID",
              "union",
              "select",
              "    'NOREL' as AccountID",
              "        , 'NOREL' as ParentAccountID",
              "        , 'NOREL' as AccountNumber",
              "        , 'NOREL' as Name",
              "        , 'NOREL' as PrimaryAddress",
              "    , 'NOREL' as PrimaryAddressLine2",
              "    , 'NOREL' as PrimaryAddressCity",
              "    , 'NOREL' as PrimaryAddressProvinceState",
              "    , 'NOREL' as PrimaryAddressCountry",
              "    , 'NOREL' as PrimaryPostalZip",
              "        , 'NOREL' as Location",
              "        , 'NOREL' as AccountStatus",
              "        , 'NOREL' as FINSAccountNumber",
              "        , TO_DATE('1900-01-01', 'YYYY-MM-DD') as AccountSince",
              "        , 'NOREL' as ReasonRef",
              "        , '0' as RestrictedFlag",
              "        , TO_DATE('1900-01-01', 'YYYY-MM-DD') as AccountStatusDate",
              "        , TO_DATE('1900-01-01', 'YYYY-MM-DD') as StatusExpiryDate",
              "        , '0' as CSDAccountFlag",
              "        , 'NOREL' as AccountWebType",
              "        , TO_DATE('1900-01-01', 'YYYY-MM-DD') as Notify",
              "    from dual"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "dimAccount"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select ",
              "        ACCOUNT.ROW_ID as AccountID",
              "        , case ACCOUNT.MASTER_OU_ID when ACCOUNT.ROW_ID then NULL else ACCOUNT.MASTER_OU_ID end as ParentAccountID",
              "        , COALESCE(TO_CHAR(ACCOUNT.X_BCF_CUST_NUM), ACCOUNT.ROW_ID) as AccountNumber\t",
              "        , ACCOUNT.NAME as Name",
              "        , ADDRESS.ADDR as PrimaryAddress",
              "    , ADDRESS.ADDR_LINE_2 as PrimaryAddressLine2",
              "    , ADDRESS.CITY as PrimaryAddressCity",
              "    , ADDRESS.STATE as PrimaryAddressProvinceState",
              "    , ADDRESS.COUNTRY as PrimaryAddressCountry",
              "    , ADDRESS.ZIPCODE as PrimaryPostalZip",
              "        , ACCOUNT.LOC as Location",
              "        , ACCOUNT.CUST_STAT_CD as AccountStatus",
              "        , ACCOUNTX.ATTRIB_07 as FINSAccountNumber",
              "        , ACCOUNT.CUST_SINCE_DT as AccountSince",
              "        , ACCOUNTX.ATTRIB_40 as ReasonRef",
              "        , ACCOUNT.X_BCF_RESTRICTED_FLG as RestrictedFlag",
              "        , ACCOUNT.STAT_CHG_DT as AccountStatusDate",
              "        , ACCOUNTX.ATTRIB_29 as StatusExpiryDate",
              "        , ACCOUNT.X_BCF_CSD_ACCOUNT_FLAG as CSDAccountFlag",
              "        , ACCOUNT.X_BCF_ACC_WEB_TYPE as AccountWebType",
              "        , ACCOUNT.X_BCF_NOTIFY as Notify",
              "from BCFSBLTST.S_ORG_EXT ACCOUNT",
              "left join BCFSBLTST.S_ORG_EXT_X ACCOUNTX",
              "    on ACCOUNT.ROW_ID = ACCOUNTX.PAR_ROW_ID ",
              "left join BCFSBLTST.S_ADDR_PER ADDRESS",
              "    on ACCOUNT.PR_ADDR_ID = ADDRESS.ROW_ID",
              "union",
              "select",
              "    'NOREL' as AccountID",
              "        , 'NOREL' as ParentAccountID",
              "        , 'NOREL' as AccountNumber",
              "        , 'NOREL' as Name",
              "        , 'NOREL' as PrimaryAddress",
              "    , 'NOREL' as PrimaryAddressLine2",
              "    , 'NOREL' as PrimaryAddressCity",
              "    , 'NOREL' as PrimaryAddressProvinceState",
              "    , 'NOREL' as PrimaryAddressCountry",
              "    , 'NOREL' as PrimaryPostalZip",
              "        , 'NOREL' as Location",
              "        , 'NOREL' as AccountStatus",
              "        , 'NOREL' as FINSAccountNumber",
              "        , TO_DATE('1900-01-01', 'YYYY-MM-DD') as AccountSince",
              "        , 'NOREL' as ReasonRef",
              "        , '0' as RestrictedFlag",
              "        , TO_DATE('1900-01-01', 'YYYY-MM-DD') as AccountStatusDate",
              "        , TO_DATE('1900-01-01', 'YYYY-MM-DD') as StatusExpiryDate",
              "        , '0' as CSDAccountFlag",
              "        , 'NOREL' as AccountWebType",
              "        , TO_DATE('1900-01-01', 'YYYY-MM-DD') as Notify",
              "    from dual</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "dimActivity",
        "columns": [
          {
            "name": "ACTIVITYID",
            "dataType": "string",
            "isUnique": true,
            "isKey": true,
            "sourceColumn": "ACTIVITYID",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "TYPE",
            "dataType": "string",
            "sourceColumn": "TYPE",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "DESCRIPTION",
            "dataType": "string",
            "sourceColumn": "DESCRIPTION",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "STATUS",
            "dataType": "string",
            "sourceColumn": "STATUS",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "PRIORITY",
            "dataType": "string",
            "sourceColumn": "PRIORITY",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "OWNER",
            "dataType": "string",
            "sourceColumn": "OWNER",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "DONEFLAG",
            "dataType": "string",
            "sourceColumn": "DONEFLAG",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "CREATEDBY",
            "dataType": "string",
            "sourceColumn": "CREATEDBY",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SOURCENAME",
            "dataType": "string",
            "sourceColumn": "SOURCENAME",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "CONTACTMETHOD",
            "dataType": "string",
            "sourceColumn": "CONTACTMETHOD",
            "sourceProviderType": "VarChar"
          }
        ],
        "partitions": [
          {
            "name": "dimActivity",
            "dataView": "full",
            "source": {
              "query": [
                "select ",
                "    ACTIVITY.ROW_ID as ActivityID",
                "    , ACTIVITY.TODO_CD as Type",
                "    , ACTIVITY.NAME as Description",
                "    , ACTIVITY.EVT_STAT_CD as Status",
                "    , ACTIVITY.EVT_PRIORITY_CD as Priority",
                "    , ACTIVITY.OWNER_LOGIN as Owner",
                "    , ACTIVITY.DONE_FLG as DoneFlag",
                "    , ACTIVITY.CREATOR_LOGIN as CreatedBy",
                "    , ACTIVITYX.ATTRIB_07 as SourceName",
                "    , ACTIVITYX.ATTRIB_06 as ContactMethod",
                "    from BCFSBLTST.S_EVT_ACT ACTIVITY",
                "    left join BCFSBLTST.S_EVT_ACT_X ACTIVITYX",
                "        on ACTIVITY.ROW_ID = ACTIVITYX.PAR_ROW_ID",
                "union",
                "select ",
                "    'NOREL' as ActivityID",
                "    , 'NOREL' as Type",
                "    , 'NOREL' as Description",
                "    , 'NOREL' as Status",
                "    , 'NOREL' as Priority",
                "    , 'NOREL' as Owner",
                "    , '0' as DoneFlag",
                "    , 'NOREL' as CreatedBy",
                "    , 'NOREL' as SourceName",
                "    , 'NOREL' as ContactMethod",
                "    from dual"
              ],
              "dataSource": "CRM"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select ",
                  "    ACTIVITY.ROW_ID as ActivityID",
                  "    , ACTIVITY.TODO_CD as Type",
                  "    , ACTIVITY.NAME as Description",
                  "    , ACTIVITY.EVT_STAT_CD as Status",
                  "    , ACTIVITY.EVT_PRIORITY_CD as Priority",
                  "    , ACTIVITY.OWNER_LOGIN as Owner",
                  "    , ACTIVITY.DONE_FLG as DoneFlag",
                  "    , ACTIVITY.CREATOR_LOGIN as CreatedBy",
                  "    , ACTIVITYX.ATTRIB_07 as SourceName",
                  "    , ACTIVITYX.ATTRIB_06 as ContactMethod",
                  "    from BCFSBLTST.S_EVT_ACT ACTIVITY",
                  "    left join BCFSBLTST.S_EVT_ACT_X ACTIVITYX",
                  "        on ACTIVITY.ROW_ID = ACTIVITYX.PAR_ROW_ID",
                  "union",
                  "select ",
                  "    'NOREL' as ActivityID",
                  "    , 'NOREL' as Type",
                  "    , 'NOREL' as Description",
                  "    , 'NOREL' as Status",
                  "    , 'NOREL' as Priority",
                  "    , 'NOREL' as Owner",
                  "    , '0' as DoneFlag",
                  "    , 'NOREL' as CreatedBy",
                  "    , 'NOREL' as SourceName",
                  "    , 'NOREL' as ContactMethod",
                  "    from dual</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select ",
              "    ACTIVITY.ROW_ID as ActivityID",
              "    , ACTIVITY.TODO_CD as Type",
              "    , ACTIVITY.NAME as Description",
              "    , ACTIVITY.EVT_STAT_CD as Status",
              "    , ACTIVITY.EVT_PRIORITY_CD as Priority",
              "    , ACTIVITY.OWNER_LOGIN as Owner",
              "    , ACTIVITY.DONE_FLG as DoneFlag",
              "    , ACTIVITY.CREATOR_LOGIN as CreatedBy",
              "    , ACTIVITYX.ATTRIB_07 as SourceName",
              "    , ACTIVITYX.ATTRIB_06 as ContactMethod",
              "    from BCFSBLTST.S_EVT_ACT ACTIVITY",
              "    left join BCFSBLTST.S_EVT_ACT_X ACTIVITYX",
              "        on ACTIVITY.ROW_ID = ACTIVITYX.PAR_ROW_ID",
              "union",
              "select ",
              "    'NOREL' as ActivityID",
              "    , 'NOREL' as Type",
              "    , 'NOREL' as Description",
              "    , 'NOREL' as Status",
              "    , 'NOREL' as Priority",
              "    , 'NOREL' as Owner",
              "    , '0' as DoneFlag",
              "    , 'NOREL' as CreatedBy",
              "    , 'NOREL' as SourceName",
              "    , 'NOREL' as ContactMethod",
              "    from dual"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "dimActivity"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select ",
              "    ACTIVITY.ROW_ID as ActivityID",
              "    , ACTIVITY.TODO_CD as Type",
              "    , ACTIVITY.NAME as Description",
              "    , ACTIVITY.EVT_STAT_CD as Status",
              "    , ACTIVITY.EVT_PRIORITY_CD as Priority",
              "    , ACTIVITY.OWNER_LOGIN as Owner",
              "    , ACTIVITY.DONE_FLG as DoneFlag",
              "    , ACTIVITY.CREATOR_LOGIN as CreatedBy",
              "    , ACTIVITYX.ATTRIB_07 as SourceName",
              "    , ACTIVITYX.ATTRIB_06 as ContactMethod",
              "    from BCFSBLTST.S_EVT_ACT ACTIVITY",
              "    left join BCFSBLTST.S_EVT_ACT_X ACTIVITYX",
              "        on ACTIVITY.ROW_ID = ACTIVITYX.PAR_ROW_ID",
              "union",
              "select ",
              "    'NOREL' as ActivityID",
              "    , 'NOREL' as Type",
              "    , 'NOREL' as Description",
              "    , 'NOREL' as Status",
              "    , 'NOREL' as Priority",
              "    , 'NOREL' as Owner",
              "    , '0' as DoneFlag",
              "    , 'NOREL' as CreatedBy",
              "    , 'NOREL' as SourceName",
              "    , 'NOREL' as ContactMethod",
              "    from dual</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "factActivity",
        "columns": [
          {
            "name": "FACTIVITYID",
            "dataType": "string",
            "isUnique": true,
            "isKey": true,
            "sourceColumn": "FACTIVITYID",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ACTIVITYID",
            "dataType": "string",
            "sourceColumn": "ACTIVITYID",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "CONTACTID",
            "dataType": "string",
            "sourceColumn": "CONTACTID",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "PLANNEDSTARTDATE",
            "dataType": "dateTime",
            "sourceColumn": "PLANNEDSTARTDATE",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "SENTDATE",
            "dataType": "dateTime",
            "sourceColumn": "SENTDATE",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "CREATEDBYUSERID",
            "dataType": "string",
            "sourceColumn": "CREATEDBYUSERID",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "CREATEDATE",
            "dataType": "dateTime",
            "sourceColumn": "CREATEDATE",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "NOTIFICATIONDATE",
            "dataType": "string",
            "sourceColumn": "NOTIFICATIONDATE",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "NOTIFICATIONTIME",
            "dataType": "string",
            "sourceColumn": "NOTIFICATIONTIME",
            "sourceProviderType": "VarChar"
          }
        ],
        "partitions": [
          {
            "name": "factActivity",
            "dataView": "full",
            "source": {
              "query": [
                "select ",
                "    ACTCON.ROW_ID as fActivityID",
                "    , COALESCE(ACTIVITY.ROW_ID, 'NOREL') as ActivityID",
                "    , COALESCE(CONTACT.ROW_ID, 'NOREL') as ContactID",
                "    , ACTIVITY.TODO_PLAN_START_DT as PlannedStartDate",
                "    , ACTIVITY.DOC_SENT_DT as SentDate",
                "    , ACTCON.CREATED_BY as CreatedByUserId",
                "    , ACTCON.CREATED as CreateDate",
                "    , ACTIVITYX.ATTRIB_01 as NotificationDate",
                "    , ACTIVITYX.ATTRIB_02 as NotificationTime",
                "    from BCFSBLTST.S_ACT_CONTACT ACTCON",
                "    left join BCFSBLTST.S_EVT_ACT ACTIVITY",
                "        on ACTCON.ACTIVITY_ID = ACTIVITY.ROW_ID",
                "    left join BCFSBLTST.S_EVT_ACT_X ACTIVITYX",
                "        on ACTIVITY.ROW_ID = ACTIVITYX.PAR_ROW_ID",
                "    left join BCFSBLTST.S_CONTACT CONTACT on ACTCON.CON_ID = CONTACT.ROW_ID"
              ],
              "dataSource": "CRM"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select ",
                  "    ACTCON.ROW_ID as fActivityID",
                  "    , COALESCE(ACTIVITY.ROW_ID, 'NOREL') as ActivityID",
                  "    , COALESCE(CONTACT.ROW_ID, 'NOREL') as ContactID",
                  "    , ACTIVITY.TODO_PLAN_START_DT as PlannedStartDate",
                  "    , ACTIVITY.DOC_SENT_DT as SentDate",
                  "    , ACTCON.CREATED_BY as CreatedByUserId",
                  "    , ACTCON.CREATED as CreateDate",
                  "    , ACTIVITYX.ATTRIB_01 as NotificationDate",
                  "    , ACTIVITYX.ATTRIB_02 as NotificationTime",
                  "    from BCFSBLTST.S_ACT_CONTACT ACTCON",
                  "    left join BCFSBLTST.S_EVT_ACT ACTIVITY",
                  "        on ACTCON.ACTIVITY_ID = ACTIVITY.ROW_ID",
                  "    left join BCFSBLTST.S_EVT_ACT_X ACTIVITYX",
                  "        on ACTIVITY.ROW_ID = ACTIVITYX.PAR_ROW_ID",
                  "    left join BCFSBLTST.S_CONTACT CONTACT on ACTCON.CON_ID = CONTACT.ROW_ID</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select ",
              "    ACTCON.ROW_ID as fActivityID",
              "    , COALESCE(ACTIVITY.ROW_ID, 'NOREL') as ActivityID",
              "    , COALESCE(CONTACT.ROW_ID, 'NOREL') as ContactID",
              "    , ACTIVITY.TODO_PLAN_START_DT as PlannedStartDate",
              "    , ACTIVITY.DOC_SENT_DT as SentDate",
              "    , ACTCON.CREATED_BY as CreatedByUserId",
              "    , ACTCON.CREATED as CreateDate",
              "    , ACTIVITYX.ATTRIB_01 as NotificationDate",
              "    , ACTIVITYX.ATTRIB_02 as NotificationTime",
              "    from BCFSBLTST.S_ACT_CONTACT ACTCON",
              "    left join BCFSBLTST.S_EVT_ACT ACTIVITY",
              "        on ACTCON.ACTIVITY_ID = ACTIVITY.ROW_ID",
              "    left join BCFSBLTST.S_EVT_ACT_X ACTIVITYX",
              "        on ACTIVITY.ROW_ID = ACTIVITYX.PAR_ROW_ID",
              "    left join BCFSBLTST.S_CONTACT CONTACT on ACTCON.CON_ID = CONTACT.ROW_ID"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "factActivity"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select ",
              "    ACTCON.ROW_ID as fActivityID",
              "    , COALESCE(ACTIVITY.ROW_ID, 'NOREL') as ActivityID",
              "    , COALESCE(CONTACT.ROW_ID, 'NOREL') as ContactID",
              "    , ACTIVITY.TODO_PLAN_START_DT as PlannedStartDate",
              "    , ACTIVITY.DOC_SENT_DT as SentDate",
              "    , ACTCON.CREATED_BY as CreatedByUserId",
              "    , ACTCON.CREATED as CreateDate",
              "    , ACTIVITYX.ATTRIB_01 as NotificationDate",
              "    , ACTIVITYX.ATTRIB_02 as NotificationTime",
              "    from BCFSBLTST.S_ACT_CONTACT ACTCON",
              "    left join BCFSBLTST.S_EVT_ACT ACTIVITY",
              "        on ACTCON.ACTIVITY_ID = ACTIVITY.ROW_ID",
              "    left join BCFSBLTST.S_EVT_ACT_X ACTIVITYX",
              "        on ACTIVITY.ROW_ID = ACTIVITYX.PAR_ROW_ID",
              "    left join BCFSBLTST.S_CONTACT CONTACT on ACTCON.CON_ID = CONTACT.ROW_ID</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "factBooking",
        "columns": [
          {
            "name": "CrmCustomerNumber",
            "dataType": "string",
            "sourceColumn": "CRM_CUSTOMER_NUMBER",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "BookingHolderID",
            "dataType": "double",
            "sourceColumn": "BOOKINGHOLDER_ID",
            "sourceProviderType": "Decimal"
          },
          {
            "name": "BookingHolderName",
            "dataType": "string",
            "sourceColumn": "BOOKINGHOLDER_NAME",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "BookingHolderSurname",
            "dataType": "string",
            "sourceColumn": "BOOKINGHOLDER_SURNAME",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "BookingHolderPhoneNumber",
            "dataType": "string",
            "sourceColumn": "BOOKINGHOLDER_PHONENUMBER",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "CRMAccountNumber",
            "dataType": "string",
            "sourceColumn": "CRM_ACCOUNT_NUMBER",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "CRMAccountName",
            "dataType": "string",
            "sourceColumn": "CRM_ACCOUNT_NAME",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "BookingReference",
            "dataType": "string",
            "sourceColumn": "BOOKING_REFERENCE",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "BCFReferenceCode",
            "dataType": "string",
            "sourceColumn": "BCF_REFERENCE_CODE",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "BookingStatus",
            "dataType": "string",
            "sourceColumn": "BOOKING_STATUS",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "StandbyStatus",
            "dataType": "string",
            "sourceColumn": "STANDBY_STATUS",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "TotalAmount",
            "dataType": "double",
            "sourceColumn": "TOTAL_AMOUNT",
            "sourceProviderType": "Decimal",
            "summarizeBy": "sum"
          },
          {
            "name": "AmountPaid",
            "dataType": "double",
            "sourceColumn": "AMOUNT_PAID",
            "sourceProviderType": "Decimal"
          },
          {
            "name": "AmountOwing",
            "dataType": "double",
            "sourceColumn": "AMOUNT_OWING",
            "sourceProviderType": "Decimal"
          },
          {
            "name": "SpecialInstructions",
            "dataType": "string",
            "sourceColumn": "SPECIAL_INSTRUCTIONS",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SalesChannel",
            "dataType": "string",
            "sourceColumn": "SALES_CHANNEL",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "DeparturePort",
            "dataType": "string",
            "sourceColumn": "DEPARTURE_PORT",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ArrivalPort",
            "dataType": "string",
            "sourceColumn": "ARRIVAL_PORT",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "DepartureDate",
            "dataType": "dateTime",
            "sourceColumn": "DEPARTURE_DATE",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "ArrivalDate",
            "dataType": "dateTime",
            "sourceColumn": "ARRIVAL_DATE",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "VehicleLength",
            "dataType": "double",
            "sourceColumn": "VEHICLE_LENGTH",
            "sourceProviderType": "Decimal"
          },
          {
            "name": "VehicleType",
            "dataType": "string",
            "sourceColumn": "VEHICLE_TYPE",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SailingCode",
            "dataType": "string",
            "sourceColumn": "SAILING_CODE",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "RestrictedFlag",
            "dataType": "string",
            "sourceColumn": "RESTRICTED_FLAG",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "HideInformation",
            "dataType": "string",
            "sourceColumn": "HIDE_INFORMATION",
            "sourceProviderType": "VarChar"
          },
          {
            "type": "calculated",
            "name": "Route",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "factBooking[DeparturePort] & \"-\" & factBooking[ArrivalPort]"
          },
          {
            "type": "calculated",
            "name": "ContactID",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "IF( CALCULATE( ",
              "        COUNTROWS(dimContact) , ",
              "        FILTER(dimContact, ",
              "        dimContact[CUSTOMERNUMBER] = factBooking[CrmCustomerNumber]) ) = 0, ",
              "    \"NOREL\", ",
              "      CALCULATE( ",
              "        FIRSTNONBLANK(dimContact[ContactID], 0) , ",
              "        FILTER(dimContact, ",
              "        dimContact[CUSTOMERNUMBER] = factBooking[CrmCustomerNumber]) ) ",
              "    )"
            ]
          }
        ],
        "partitions": [
          {
            "name": "factBooking",
            "dataView": "full",
            "source": {
              "query": [
                "select distinct",
                "       bh.CUSTOMERID          CRM_CUSTOMER_NUMBER",
                "      ,bh.CONTACTID           BOOKINGHOLDER_ID",
                "      ,bh.NAME                BOOKINGHOLDER_NAME",
                "      ,bh.SURNAME             BOOKINGHOLDER_SURNAME",
                "      ,bh.PHONENUMBER         BOOKINGHOLDER_PHONENUMBER",
                "      ,bc.ID                  CRM_ACCOUNT_NUMBER",
                "      ,bc.NAME                CRM_ACCOUNT_NAME",
                "      ,b.BOOKINGREFERENCE     BOOKING_REFERENCE",
                "      ,br_dep.CUSTOMERREFERENCE   BCF_REFERENCE_CODE",
                "      ,b.BOOKINGSTATUS        BOOKING_STATUS",
                "      ,b.STANDBYSTATUS        STANDBY_STATUS",
                "      ,b.GROSSAMOUNT          TOTAL_AMOUNT",
                "      ,b.PAID                 AMOUNT_PAID",
                "      ,b.GROSSAMOUNT-b.PAID   AMOUNT_OWING",
                "      ,b.SPECIALINSTRUCTIONS  SPECIAL_INSTRUCTIONS",
                "      ,b.SALESCHANNEL         SALES_CHANNEL",
                "      ,br_dep.ROUTEDEPARTUREPORT  DEPARTURE_PORT",
                "      ,br_arr.ROUTEARRIVALPORT    ARRIVAL_PORT",
                "      ,br_dep.DEPARTUREDATE       DEPARTURE_DATE",
                "      ,br_arr.ARRIVALDATE         ARRIVAL_DATE",
                "      ,bp.VEHICLELENGTH       VEHICLE_LENGTH",
                "      ,bp.PRODUCTCODE         VEHICLE_TYPE",
                "      ,s.CODE                 SAILING_CODE",
                "      ,s.NORESERVABLE         RESTRICTED_FLAG",
                "      ,s.HIDEINFORMATION      HIDE_INFORMATION",
                "  from ebooking.IBE_BOOKING b",
                "      ,ebooking.IBE_BOOKINGHOLDER bh",
                "      ,ebooking.IBE_BOOKINGROUTE br_dep",
                "      ,ebooking.IBE_BOOKINGROUTE br_arr",
                "      ,ebooking.MSP_SAILING s",
                "      ,ebooking.IBE_BOOKEDPRODUCT bp",
                "      ,ebooking.IBE_BOOKINGCRMENTITY bc",
                "where b.bookingstatus in ('OPTION','MODIFIED','CANCELLED','BOOKED')",
                "   and b.BOOKINGVERSION = (select max(BOOKINGVERSION) from ebooking.IBE_BOOKING where BOOKINGREFERENCE = b.BOOKINGREFERENCE)",
                "   and b.HOLDERCONTACTID = bh.CONTACTID",
                "   and bh.LASTVERSION = 'Y'",
                "   and b.BOOKINGREFERENCE = br_dep.BOOKINGREFERENCE",
                "   and b.BOOKINGVERSION = br_dep.BOOKINGVERSION",
                "   and b.STARTDATE = br_dep.BOOKINGSTARTDATE",
                "   and br_dep.DEPARTUREDATE = (select min(DEPARTUREDATE) from ebooking.IBE_BOOKINGROUTE where br_dep.BOOKINGREFERENCE = BOOKINGREFERENCE and br_dep.BOOKINGVERSION = BOOKINGVERSION)",
                "   and b.BOOKINGREFERENCE = br_arr.BOOKINGREFERENCE",
                "   and b.BOOKINGVERSION = br_arr.BOOKINGVERSION",
                "   and b.STARTDATE = br_arr.BOOKINGSTARTDATE",
                "   and br_arr.DEPARTUREDATE = (select max(DEPARTUREDATE) from ebooking.IBE_BOOKINGROUTE where br_arr.BOOKINGREFERENCE = BOOKINGREFERENCE and br_arr.BOOKINGVERSION = BOOKINGVERSION)",
                "   and br_dep.SAILINGCODE = s.CODE",
                "   and br_dep.SAILINGSTARTDATE = s.STARTDATE",
                "   and b.BOOKINGREFERENCE = bp.BOOKINGREFERENCE (+)",
                "   and b.BOOKINGVERSION  = bp.BOOKINGVERSION (+)",
                "   and b.STARTDATE = bp.BOOKINGSTARTDATE (+)",
                "   and bp.PRODUCTTYPE (+) = 'VEHICLE'",
                "   and b.BOOKINGREFERENCE = bc.BOOKINGREFERENCE (+)",
                "   and b.BOOKINGVERSION  = bc.BOOKINGVERSION (+)",
                "   and b.STARTDATE = bc.BOOKINGSTARTDATE (+)"
              ],
              "dataSource": "Booking"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct",
                  "       bh.CUSTOMERID          CRM_CUSTOMER_NUMBER",
                  "      ,bh.CONTACTID           BOOKINGHOLDER_ID",
                  "      ,bh.NAME                BOOKINGHOLDER_NAME",
                  "      ,bh.SURNAME             BOOKINGHOLDER_SURNAME",
                  "      ,bh.PHONENUMBER         BOOKINGHOLDER_PHONENUMBER",
                  "      ,bc.ID                  CRM_ACCOUNT_NUMBER",
                  "      ,bc.NAME                CRM_ACCOUNT_NAME",
                  "      ,b.BOOKINGREFERENCE     BOOKING_REFERENCE",
                  "      ,br_dep.CUSTOMERREFERENCE   BCF_REFERENCE_CODE",
                  "      ,b.BOOKINGSTATUS        BOOKING_STATUS",
                  "      ,b.STANDBYSTATUS        STANDBY_STATUS",
                  "      ,b.GROSSAMOUNT          TOTAL_AMOUNT",
                  "      ,b.PAID                 AMOUNT_PAID",
                  "      ,b.GROSSAMOUNT-b.PAID   AMOUNT_OWING",
                  "      ,b.SPECIALINSTRUCTIONS  SPECIAL_INSTRUCTIONS",
                  "      ,b.SALESCHANNEL         SALES_CHANNEL",
                  "      ,br_dep.ROUTEDEPARTUREPORT  DEPARTURE_PORT",
                  "      ,br_arr.ROUTEARRIVALPORT    ARRIVAL_PORT",
                  "      ,br_dep.DEPARTUREDATE       DEPARTURE_DATE",
                  "      ,br_arr.ARRIVALDATE         ARRIVAL_DATE",
                  "      ,bp.VEHICLELENGTH       VEHICLE_LENGTH",
                  "      ,bp.PRODUCTCODE         VEHICLE_TYPE",
                  "      ,s.CODE                 SAILING_CODE",
                  "      ,s.NORESERVABLE         RESTRICTED_FLAG",
                  "      ,s.HIDEINFORMATION      HIDE_INFORMATION",
                  "  from ebooking.IBE_BOOKING b",
                  "      ,ebooking.IBE_BOOKINGHOLDER bh",
                  "      ,ebooking.IBE_BOOKINGROUTE br_dep",
                  "      ,ebooking.IBE_BOOKINGROUTE br_arr",
                  "      ,ebooking.MSP_SAILING s",
                  "      ,ebooking.IBE_BOOKEDPRODUCT bp",
                  "      ,ebooking.IBE_BOOKINGCRMENTITY bc",
                  "where b.bookingstatus in ('OPTION','MODIFIED','CANCELLED','BOOKED')",
                  "   and b.BOOKINGVERSION = (select max(BOOKINGVERSION) from ebooking.IBE_BOOKING where BOOKINGREFERENCE = b.BOOKINGREFERENCE)",
                  "   and b.HOLDERCONTACTID = bh.CONTACTID",
                  "   and bh.LASTVERSION = 'Y'",
                  "   and b.BOOKINGREFERENCE = br_dep.BOOKINGREFERENCE",
                  "   and b.BOOKINGVERSION = br_dep.BOOKINGVERSION",
                  "   and b.STARTDATE = br_dep.BOOKINGSTARTDATE",
                  "   and br_dep.DEPARTUREDATE = (select min(DEPARTUREDATE) from ebooking.IBE_BOOKINGROUTE where br_dep.BOOKINGREFERENCE = BOOKINGREFERENCE and br_dep.BOOKINGVERSION = BOOKINGVERSION)",
                  "   and b.BOOKINGREFERENCE = br_arr.BOOKINGREFERENCE",
                  "   and b.BOOKINGVERSION = br_arr.BOOKINGVERSION",
                  "   and b.STARTDATE = br_arr.BOOKINGSTARTDATE",
                  "   and br_arr.DEPARTUREDATE = (select max(DEPARTUREDATE) from ebooking.IBE_BOOKINGROUTE where br_arr.BOOKINGREFERENCE = BOOKINGREFERENCE and br_arr.BOOKINGVERSION = BOOKINGVERSION)",
                  "   and br_dep.SAILINGCODE = s.CODE",
                  "   and br_dep.SAILINGSTARTDATE = s.STARTDATE",
                  "   and b.BOOKINGREFERENCE = bp.BOOKINGREFERENCE (+)",
                  "   and b.BOOKINGVERSION  = bp.BOOKINGVERSION (+)",
                  "   and b.STARTDATE = bp.BOOKINGSTARTDATE (+)",
                  "   and bp.PRODUCTTYPE (+) = 'VEHICLE'",
                  "   and b.BOOKINGREFERENCE = bc.BOOKINGREFERENCE (+)",
                  "   and b.BOOKINGVERSION  = bc.BOOKINGVERSION (+)",
                  "   and b.STARTDATE = bc.BOOKINGSTARTDATE (+)</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct",
              "       bh.CUSTOMERID          CRM_CUSTOMER_NUMBER",
              "      ,bh.CONTACTID           BOOKINGHOLDER_ID",
              "      ,bh.NAME                BOOKINGHOLDER_NAME",
              "      ,bh.SURNAME             BOOKINGHOLDER_SURNAME",
              "      ,bh.PHONENUMBER         BOOKINGHOLDER_PHONENUMBER",
              "      ,bc.ID                  CRM_ACCOUNT_NUMBER",
              "      ,bc.NAME                CRM_ACCOUNT_NAME",
              "      ,b.BOOKINGREFERENCE     BOOKING_REFERENCE",
              "      ,br_dep.CUSTOMERREFERENCE   BCF_REFERENCE_CODE",
              "      ,b.BOOKINGSTATUS        BOOKING_STATUS",
              "      ,b.STANDBYSTATUS        STANDBY_STATUS",
              "      ,b.GROSSAMOUNT          TOTAL_AMOUNT",
              "      ,b.PAID                 AMOUNT_PAID",
              "      ,b.GROSSAMOUNT-b.PAID   AMOUNT_OWING",
              "      ,b.SPECIALINSTRUCTIONS  SPECIAL_INSTRUCTIONS",
              "      ,b.SALESCHANNEL         SALES_CHANNEL",
              "      ,br_dep.ROUTEDEPARTUREPORT  DEPARTURE_PORT",
              "      ,br_arr.ROUTEARRIVALPORT    ARRIVAL_PORT",
              "      ,br_dep.DEPARTUREDATE       DEPARTURE_DATE",
              "      ,br_arr.ARRIVALDATE         ARRIVAL_DATE",
              "      ,bp.VEHICLELENGTH       VEHICLE_LENGTH",
              "      ,bp.PRODUCTCODE         VEHICLE_TYPE",
              "      ,s.CODE                 SAILING_CODE",
              "      ,s.NORESERVABLE         RESTRICTED_FLAG",
              "      ,s.HIDEINFORMATION      HIDE_INFORMATION",
              "  from ebooking.IBE_BOOKING b",
              "      ,ebooking.IBE_BOOKINGHOLDER bh",
              "      ,ebooking.IBE_BOOKINGROUTE br_dep",
              "      ,ebooking.IBE_BOOKINGROUTE br_arr",
              "      ,ebooking.MSP_SAILING s",
              "      ,ebooking.IBE_BOOKEDPRODUCT bp",
              "      ,ebooking.IBE_BOOKINGCRMENTITY bc",
              "where b.bookingstatus in ('OPTION','MODIFIED','CANCELLED','BOOKED')",
              "   and b.BOOKINGVERSION = (select max(BOOKINGVERSION) from ebooking.IBE_BOOKING where BOOKINGREFERENCE = b.BOOKINGREFERENCE)",
              "   and b.HOLDERCONTACTID = bh.CONTACTID",
              "   and bh.LASTVERSION = 'Y'",
              "   and b.BOOKINGREFERENCE = br_dep.BOOKINGREFERENCE",
              "   and b.BOOKINGVERSION = br_dep.BOOKINGVERSION",
              "   and b.STARTDATE = br_dep.BOOKINGSTARTDATE",
              "   and br_dep.DEPARTUREDATE = (select min(DEPARTUREDATE) from ebooking.IBE_BOOKINGROUTE where br_dep.BOOKINGREFERENCE = BOOKINGREFERENCE and br_dep.BOOKINGVERSION = BOOKINGVERSION)",
              "   and b.BOOKINGREFERENCE = br_arr.BOOKINGREFERENCE",
              "   and b.BOOKINGVERSION = br_arr.BOOKINGVERSION",
              "   and b.STARTDATE = br_arr.BOOKINGSTARTDATE",
              "   and br_arr.DEPARTUREDATE = (select max(DEPARTUREDATE) from ebooking.IBE_BOOKINGROUTE where br_arr.BOOKINGREFERENCE = BOOKINGREFERENCE and br_arr.BOOKINGVERSION = BOOKINGVERSION)",
              "   and br_dep.SAILINGCODE = s.CODE",
              "   and br_dep.SAILINGSTARTDATE = s.STARTDATE",
              "   and b.BOOKINGREFERENCE = bp.BOOKINGREFERENCE (+)",
              "   and b.BOOKINGVERSION  = bp.BOOKINGVERSION (+)",
              "   and b.STARTDATE = bp.BOOKINGSTARTDATE (+)",
              "   and bp.PRODUCTTYPE (+) = 'VEHICLE'",
              "   and b.BOOKINGREFERENCE = bc.BOOKINGREFERENCE (+)",
              "   and b.BOOKINGVERSION  = bc.BOOKINGVERSION (+)",
              "   and b.STARTDATE = bc.BOOKINGSTARTDATE (+)"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "factBooking"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct",
              "       bh.CUSTOMERID          CRM_CUSTOMER_NUMBER",
              "      ,bh.CONTACTID           BOOKINGHOLDER_ID",
              "      ,bh.NAME                BOOKINGHOLDER_NAME",
              "      ,bh.SURNAME             BOOKINGHOLDER_SURNAME",
              "      ,bh.PHONENUMBER         BOOKINGHOLDER_PHONENUMBER",
              "      ,bc.ID                  CRM_ACCOUNT_NUMBER",
              "      ,bc.NAME                CRM_ACCOUNT_NAME",
              "      ,b.BOOKINGREFERENCE     BOOKING_REFERENCE",
              "      ,br_dep.CUSTOMERREFERENCE   BCF_REFERENCE_CODE",
              "      ,b.BOOKINGSTATUS        BOOKING_STATUS",
              "      ,b.STANDBYSTATUS        STANDBY_STATUS",
              "      ,b.GROSSAMOUNT          TOTAL_AMOUNT",
              "      ,b.PAID                 AMOUNT_PAID",
              "      ,b.GROSSAMOUNT-b.PAID   AMOUNT_OWING",
              "      ,b.SPECIALINSTRUCTIONS  SPECIAL_INSTRUCTIONS",
              "      ,b.SALESCHANNEL         SALES_CHANNEL",
              "      ,br_dep.ROUTEDEPARTUREPORT  DEPARTURE_PORT",
              "      ,br_arr.ROUTEARRIVALPORT    ARRIVAL_PORT",
              "      ,br_dep.DEPARTUREDATE       DEPARTURE_DATE",
              "      ,br_arr.ARRIVALDATE         ARRIVAL_DATE",
              "      ,bp.VEHICLELENGTH       VEHICLE_LENGTH",
              "      ,bp.PRODUCTCODE         VEHICLE_TYPE",
              "      ,s.CODE                 SAILING_CODE",
              "      ,s.NORESERVABLE         RESTRICTED_FLAG",
              "      ,s.HIDEINFORMATION      HIDE_INFORMATION",
              "  from ebooking.IBE_BOOKING b",
              "      ,ebooking.IBE_BOOKINGHOLDER bh",
              "      ,ebooking.IBE_BOOKINGROUTE br_dep",
              "      ,ebooking.IBE_BOOKINGROUTE br_arr",
              "      ,ebooking.MSP_SAILING s",
              "      ,ebooking.IBE_BOOKEDPRODUCT bp",
              "      ,ebooking.IBE_BOOKINGCRMENTITY bc",
              "where b.bookingstatus in ('OPTION','MODIFIED','CANCELLED','BOOKED')",
              "   and b.BOOKINGVERSION = (select max(BOOKINGVERSION) from ebooking.IBE_BOOKING where BOOKINGREFERENCE = b.BOOKINGREFERENCE)",
              "   and b.HOLDERCONTACTID = bh.CONTACTID",
              "   and bh.LASTVERSION = 'Y'",
              "   and b.BOOKINGREFERENCE = br_dep.BOOKINGREFERENCE",
              "   and b.BOOKINGVERSION = br_dep.BOOKINGVERSION",
              "   and b.STARTDATE = br_dep.BOOKINGSTARTDATE",
              "   and br_dep.DEPARTUREDATE = (select min(DEPARTUREDATE) from ebooking.IBE_BOOKINGROUTE where br_dep.BOOKINGREFERENCE = BOOKINGREFERENCE and br_dep.BOOKINGVERSION = BOOKINGVERSION)",
              "   and b.BOOKINGREFERENCE = br_arr.BOOKINGREFERENCE",
              "   and b.BOOKINGVERSION = br_arr.BOOKINGVERSION",
              "   and b.STARTDATE = br_arr.BOOKINGSTARTDATE",
              "   and br_arr.DEPARTUREDATE = (select max(DEPARTUREDATE) from ebooking.IBE_BOOKINGROUTE where br_arr.BOOKINGREFERENCE = BOOKINGREFERENCE and br_arr.BOOKINGVERSION = BOOKINGVERSION)",
              "   and br_dep.SAILINGCODE = s.CODE",
              "   and br_dep.SAILINGSTARTDATE = s.STARTDATE",
              "   and b.BOOKINGREFERENCE = bp.BOOKINGREFERENCE (+)",
              "   and b.BOOKINGVERSION  = bp.BOOKINGVERSION (+)",
              "   and b.STARTDATE = bp.BOOKINGSTARTDATE (+)",
              "   and bp.PRODUCTTYPE (+) = 'VEHICLE'",
              "   and b.BOOKINGREFERENCE = bc.BOOKINGREFERENCE (+)",
              "   and b.BOOKINGVERSION  = bc.BOOKINGVERSION (+)",
              "   and b.STARTDATE = bc.BOOKINGSTARTDATE (+)</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "factContactAcctRelationship",
        "columns": [
          {
            "name": "FCONACCTRELID",
            "dataType": "string",
            "sourceColumn": "FCONACCTRELID",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "CREATEDDATE",
            "dataType": "dateTime",
            "sourceColumn": "CREATEDDATE",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "CREATEDBYUSERID",
            "dataType": "string",
            "sourceColumn": "CREATEDBYUSERID",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "CONTACTID",
            "dataType": "string",
            "sourceColumn": "CONTACTID",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ACCOUNTID",
            "dataType": "string",
            "sourceColumn": "ACCOUNTID",
            "sourceProviderType": "VarChar"
          }
        ],
        "partitions": [
          {
            "name": "factContactAcctRelationship",
            "dataView": "full",
            "source": {
              "query": [
                "select PARTY.ROW_ID as FConAcctRelID, PARTY.CREATED as CreatedDate, PARTy.Created_By as CreatedByUserId, CONTACT.ROW_ID as ContactID, ACCNT.ROW_ID as AccountID",
                "    from BCFSBLTST.S_PARTY_PER PARTY",
                "    inner join BCFSBLTST.S_CONTACT CONTACT",
                "        on PARTY.PERSON_ID = CONTACT.ROW_ID",
                "    inner join BCFSBLTST.S_ORG_EXT ACCNT",
                "        on PARTY.PARTY_ID = ACCNT.ROW_ID"
              ],
              "dataSource": "CRM"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select PARTY.ROW_ID as FConAcctRelID, PARTY.CREATED as CreatedDate, PARTy.Created_By as CreatedByUserId, CONTACT.ROW_ID as ContactID, ACCNT.ROW_ID as AccountID",
                  "    from BCFSBLTST.S_PARTY_PER PARTY",
                  "    inner join BCFSBLTST.S_CONTACT CONTACT",
                  "        on PARTY.PERSON_ID = CONTACT.ROW_ID",
                  "    inner join BCFSBLTST.S_ORG_EXT ACCNT",
                  "        on PARTY.PARTY_ID = ACCNT.ROW_ID</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select PARTY.ROW_ID as FConAcctRelID, PARTY.CREATED as CreatedDate, PARTy.Created_By as CreatedByUserId, CONTACT.ROW_ID as ContactID, ACCNT.ROW_ID as AccountID",
              "    from BCFSBLTST.S_PARTY_PER PARTY",
              "    inner join BCFSBLTST.S_CONTACT CONTACT",
              "        on PARTY.PERSON_ID = CONTACT.ROW_ID",
              "    inner join BCFSBLTST.S_ORG_EXT ACCNT",
              "        on PARTY.PARTY_ID = ACCNT.ROW_ID"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "factContactAcctRelationship"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select PARTY.ROW_ID as FConAcctRelID, PARTY.CREATED as CreatedDate, PARTy.Created_By as CreatedByUserId, CONTACT.ROW_ID as ContactID, ACCNT.ROW_ID as AccountID",
              "    from BCFSBLTST.S_PARTY_PER PARTY",
              "    inner join BCFSBLTST.S_CONTACT CONTACT",
              "        on PARTY.PERSON_ID = CONTACT.ROW_ID",
              "    inner join BCFSBLTST.S_ORG_EXT ACCNT",
              "        on PARTY.PARTY_ID = ACCNT.ROW_ID</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "ArrivalPortLatLong",
        "isHidden": true,
        "columns": [
          {
            "name": "ArrivalPortCode",
            "dataType": "string",
            "sourceColumn": "CODE",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ArrLat",
            "dataType": "double",
            "sourceColumn": "Latitude",
            "sourceProviderType": "Double"
          },
          {
            "name": "ArrLong",
            "dataType": "double",
            "sourceColumn": "Longitude",
            "sourceProviderType": "Double"
          }
        ],
        "partitions": [
          {
            "name": "PortLatLong",
            "dataView": "full",
            "source": {
              "query": " \t\t\t\tSELECT [PortLatLong#csv].*   FROM [PortLatLong#csv] ",
              "dataSource": "Text PortLatLong"
            }
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": " \t\t\t\tSELECT [PortLatLong#csv].*   FROM [PortLatLong#csv] "
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "PortLatLong#csv"
          }
        ]
      },
      {
        "name": "DeparturePortLatLong",
        "isHidden": true,
        "columns": [
          {
            "name": "DeparturePortCode",
            "dataType": "string",
            "sourceColumn": "CODE",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "DepLat",
            "dataType": "double",
            "sourceColumn": "Latitude",
            "sourceProviderType": "Double"
          },
          {
            "name": "DepLong",
            "dataType": "double",
            "sourceColumn": "Longitude",
            "sourceProviderType": "Double"
          }
        ],
        "partitions": [
          {
            "name": "PortLatLong",
            "dataView": "full",
            "source": {
              "query": " \t\t\t\tSELECT [PortLatLong#csv].*   FROM [PortLatLong#csv] ",
              "dataSource": "Text PortLatLong"
            }
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": " \t\t\t\tSELECT [PortLatLong#csv].*   FROM [PortLatLong#csv] "
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "PortLatLong#csv"
          }
        ]
      },
      {
        "name": "dimPorts",
        "isHidden": true,
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "ArrivalPortCode",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "ArrivalPortLatLong[ArrivalPortCode]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ArrLat",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "ArrivalPortLatLong[ArrLat]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ArrLong",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "ArrivalPortLatLong[ArrLong]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "DeparturePortCode",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "DeparturePortLatLong[DeparturePortCode]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "DepLat",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "DeparturePortLatLong[DepLat]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "DepLong",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "DeparturePortLatLong[DepLong]"
          },
          {
            "type": "calculated",
            "name": "PortsID",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "'dimPorts'[DeparturePortCode] & \"-\" & 'dimPorts'[ArrivalPortCode]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": "CROSSJOIN(ArrivalPortLatLong, DeparturePortLatLong)"
            }
          }
        ]
      },
      {
        "name": "factRouteMap",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "Lat",
            "dataType": "double",
            "isNameInferred": false,
            "isDataTypeInferred": false,
            "sourceColumn": "dimPorts[DepLat]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Long",
            "dataType": "double",
            "isNameInferred": false,
            "isDataTypeInferred": false,
            "sourceColumn": "dimPorts[DepLong]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Date",
            "dataType": "dateTime",
            "isNameInferred": false,
            "isDataTypeInferred": true,
            "sourceColumn": "factBooking[DepartureDate]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "SailingCode",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "factBooking[SailingCode]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Route",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "factBooking[Route]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": [
                "UNION(",
                "SUMMARIZE(factBooking, dimPorts[DepLat], dimPorts[DepLong], factBooking[DepartureDate], factBooking[SailingCode], factBooking[Route]),",
                "SUMMARIZE(factBooking, dimPorts[ArrLat], dimPorts[ArrLong], factBooking[ArrivalDate], factBooking[SailingCode], factBooking[Route]))"
              ]
            }
          }
        ]
      },
      {
        "name": "dimSailing",
        "isHidden": true,
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "SailingCode",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "factBooking[SailingCode]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": "distinct(factBooking[SailingCode])"
            }
          }
        ]
      },
      {
        "name": "dimBookingAccount",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "ParentAccountName",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "dimAccount[ParentAccountName]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "AcccountName",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "dimAccount[AcccountName]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "CUSTOMERNUMBER",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "dimContact[CUSTOMERNUMBER]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "FIRSTNAME",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "dimContact[FIRSTNAME]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "LASTNAME",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "dimContact[LASTNAME]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "CONTACTID",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "dimContact[CONTACTID]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ACCOUNTID",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "dimAccount[ACCOUNTID]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": "summarize(factContactAcctRelationship, dimAccount[ParentAccountName], dimAccount[AcccountName], dimContact[CUSTOMERNUMBER], dimContact[FIRSTNAME], dimContact[LASTNAME], dimContact[CONTACTID], dimAccount[AccountID])"
            }
          }
        ]
      }
    ],
    "relationships": [
      {
        "name": "a23e1064-2f7c-4521-a2df-56df08e5faf2",
        "fromTable": "factActivity",
        "fromColumn": "CONTACTID",
        "toTable": "dimContact",
        "toColumn": "CONTACTID"
      },
      {
        "name": "a5bbfc34-1d09-4ea9-9804-dbd2cea0e0ca",
        "fromTable": "factActivity",
        "fromColumn": "ACTIVITYID",
        "toTable": "dimActivity",
        "toColumn": "ACTIVITYID",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "6bff43f1-0c88-4df5-a747-1178f7bc4999",
        "fromTable": "factAgreement",
        "fromColumn": "AGREEMENTID",
        "toTable": "dimAgreement",
        "toColumn": "AGREEMENTID"
      },
      {
        "name": "f1805d09-7b8d-46d8-ae4a-bfe2a421a780",
        "fromTable": "factAgreement",
        "fromColumn": "CONTACTID",
        "toTable": "dimContact",
        "toColumn": "CONTACTID"
      },
      {
        "name": "e47d6946-0f2e-446f-a142-a0d93009429b",
        "fromTable": "factSubscription",
        "fromColumn": "AGREEMENTID",
        "toTable": "dimAgreement",
        "toColumn": "AGREEMENTID"
      },
      {
        "name": "9e12c69a-4154-4dfe-97fe-2c284833dcd8",
        "fromTable": "factAddress",
        "fromColumn": "CONTACTID",
        "toTable": "dimContact",
        "toColumn": "CONTACTID",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "0380177f-b007-46c4-be22-7e2d65b7cd31",
        "fromTable": "factAddress",
        "fromColumn": "ADDRESSID",
        "toTable": "dimAddress",
        "toColumn": "ADDRESSID",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "2bd9eef8-195a-4517-ad6b-5e879f2c851f",
        "fromTable": "factBooking",
        "fromColumn": "Route",
        "toTable": "dimPorts",
        "toColumn": "PortsID"
      },
      {
        "name": "c32d2128-d736-4968-ad5a-26dc4f7fbed9",
        "fromTable": "factRouteMap",
        "fromColumn": "SailingCode",
        "toTable": "dimSailing",
        "toColumn": "SailingCode",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "aa2511bf-b061-440a-a7b8-b9e0c96bc144",
        "fromTable": "factBooking",
        "fromColumn": "SailingCode",
        "toTable": "dimSailing",
        "toColumn": "SailingCode",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "0d81c023-138c-4e95-89f9-f56ea0bbdcdd",
        "fromTable": "factBooking",
        "fromColumn": "DeparturePort",
        "toTable": "DeparturePortLatLong",
        "toColumn": "DeparturePortCode"
      },
      {
        "name": "5eb6c3a2-3072-409f-93bc-71e55b403390",
        "fromTable": "factBooking",
        "fromColumn": "ArrivalPort",
        "toTable": "ArrivalPortLatLong",
        "toColumn": "ArrivalPortCode"
      },
      {
        "name": "fbca9fef-4656-4e7e-ac2f-4d1a62c977cf",
        "fromTable": "factSubscription",
        "fromColumn": "CONTACTID",
        "toTable": "dimContact",
        "toColumn": "CONTACTID",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "52ba4238-3987-45f2-b855-096fe55bffa9",
        "fromTable": "factSubscription",
        "fromColumn": "SUBSCRIPTIONID",
        "toTable": "dimSubscription",
        "toColumn": "SUBSCRIPTIONID"
      },
      {
        "name": "99e03c81-b0d6-40e5-b6c9-4590277f81f5",
        "fromTable": "factContactAcctRelationship",
        "fromColumn": "ACCOUNTID",
        "toTable": "dimAccount",
        "toColumn": "ACCOUNTID",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "2691f607-3ee3-4199-b0db-83d3064e1206",
        "fromTable": "factContactAcctRelationship",
        "fromColumn": "CONTACTID",
        "toTable": "dimContact",
        "toColumn": "CONTACTID",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "8ee7cbc4-4b69-4234-9870-0d79ac981c30",
        "fromTable": "factBooking",
        "fromColumn": "CrmCustomerNumber",
        "toTable": "dimContact",
        "toColumn": "CUSTOMERNUMBER",
        "crossFilteringBehavior": "bothDirections"
      }
    ],
    "annotations": [
      {
        "name": "ClientCompatibilityLevel",
        "value": "400"
      }
    ]
  },
  "id": "SemanticModel"
}